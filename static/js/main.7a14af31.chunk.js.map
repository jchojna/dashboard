{"version":3,"sources":["assets/icons.svg","lib/countryCodes.js","lib/dataHelpers.js","lib/dataHandlers.js","lib/dataGenerator.js","components/Icon.js","components/TextPanel.js","components/VisualPanel.js","components/Dropdown.js","components/Button.js","components/Histogram.js","components/Map.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Afghanistan","Albania","Algeria","Andorra","Angola","Anguilla","Antarctica","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Botswana","Brazil","Brunei","Bulgaria","Burundi","Cambodia","Cameroon","Canada","Chad","Chile","China","Colombia","Comoros","Croatia","Cuba","Curacao","Cyprus","Congo","Denmark","Djibouti","Dominica","Ecuador","Egypt","Eritrea","Estonia","Ethiopia","Fiji","Finland","France","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guam","Guatemala","Guernsey","Guinea","Guyana","Haiti","Honduras","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Mauritania","Mauritius","Mayotte","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","Nicaragua","Niger","Nigeria","Niue","Norway","Oman","Pakistan","Palau","Palestine","Panama","Paraguay","Peru","Philippines","Pitcairn","Poland","Portugal","Qatar","Reunion","Romania","Russia","Rwanda","Samoa","Senegal","Serbia","Seychelles","Singapore","Slovakia","Slovenia","Somalia","Spain","Sudan","Suriname","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","Togo","Tokelau","Tonga","Tunisia","Turkey","Turkmenistan","Tuvalu","Uganda","Ukraine","Uruguay","Uzbekistan","Vanuatu","Vatican","Venezuela","Vietnam","Yemen","Zambia","Zimbabwe","statsFields","profit","users","orders","complaints","statsPeriods","today","yesterday","week","month","year","months","0","1","2","3","4","5","6","7","8","9","10","11","12","analyticsPanels","getRandom","bottomLimit","upperLimit","Math","floor","random","getDateString","date","toISOString","slice","getBreakpointDates","range","now","Date","Object","entries","find","key","map","offset","setDate","getDate","getTotalInTimeRange","data","type","breakpointDates","lastPeriodTotal","prevPeriodTotal","lastPeriodEndDate","lastPeriodStartDate","prevPeriodEndDate","prevPeriodStartDate","values","forEach","country","prevStartIndex","keys","findIndex","prevEndIndex","lastStartIndex","lastEndIndex","reduce","acc","curr","index","percentage","toFixed","getYears","currentYear","getFullYear","years","split","allYears","i","parseInt","Set","sort","push","a","b","getColorRgb","id","svgIcon","document","querySelector","window","getComputedStyle","getPropertyValue","getDateIds","array","isYearly","allDaysAsDates","daysAsDates","allMonthsAsDates","join","monthsAsDates","getSpecificData","field","isAllBefore","monthNum","yearNum","histArray","datesObj","filteredHistArray","filter","elem","y","m","dateA","dateB","getNum","dateStrings","histData","dateString","value","includes","getAnalyticsData","mapData","countriesTotals","match","getColor","r","g","countryName","totalsArray","maxTotal","max","allCountriesTotal","countryCode","countryCodes","countryTotal","countryPercent","opacity","fillColor","getSummaryData","getTotal","beforeTotal","currentTotal","allTotal","beforePercent","currentPercent","unshift","getFieldTotals","countriesList","startDate","getData","list","item","day","todaysDate","todaysDateString","Icon","props","isRotated","iconClass","classNames","className","viewBox","href","icons","TextPanel","heading","percentageClass","absPercent","abs","percentValue","isIconRotated","VisualPanel","isMaximized","onMaximize","iconId","onClick","children","Dropdown","componentDidMount","addEventListener","exitDropdownMenu","componentWillUnmount","removeEventListener","e","state","isOpen","dropdown","current","contains","target","toggleDropdown","setState","prevState","handleMenu","onMenuClick","renderMenu","menuList","isListAnArray","Array","isArray","menuItems","label","React","createRef","this","currentId","buttonClass","ref","Component","Button","Histogram","layout","margin","axisRight","axisBottom","colors","enableGridX","enableGridY","indexBy","padding","innerPadding","colorBy","borderColor","from","modifiers","axisTop","axisLeft","tickSize","tickPadding","tickRotation","tickValues","enableLabel","gridXValues","gridYValues","labelSkipWidth","labelSkipHeight","labelTextColor","legends","tooltip","tooltipData","indexValue","monthName","text","theme","axis","textColor","textTransform","tickColor","ticks","line","stroke","fill","fontWeight","fontFamily","fontSize","grid","strokeWidth","strokeDasharray","container","borderRadius","boxShadow","animate","motionStiffness","motionDamping","Map","resize","clear","childNodes","child","removeChild","drawMap","Datamaps","assign","element","projection","responsive","fills","defaultFill","geographyConfig","borderWidth","borderOpacity","highlightFillColor","geo","highlightBorderColor","highlightBorderWidth","popupTemplate","properties","name","done","datamap","svg","call","d3","behavior","zoom","scaleExtent","on","selectAll","attr","event","translate","scale","style","paddingBottom","App","period","stats","analytics","dataHandlers","dataHelpers","summaryData","handleStats","yearsArray","statsOutput","handleAnalytics","console","log","accentColor","renderAnalytics","top","right","bottom","left","handleMaximize","maximizedPanel","getMonth","statsDescription","dropdownsLists","analyticsClass","panel","hasLabel","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a14af31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.d78c54d1.svg\";","export default {\r\n  Afghanistan: \"AFG\",\r\n  Albania: \"ALB\",\r\n  Algeria: \"DZA\",\r\n  \"American Samoa\": \"ASM\",\r\n  Andorra: \"AND\",\r\n  Angola: \"AGO\",\r\n  Anguilla: \"AIA\",\r\n  Antarctica: \"ATA\",\r\n  \"Antigua and Barbuda\": \"ATG\",\r\n  Argentina: \"ARG\",\r\n  Armenia: \"ARM\",\r\n  Aruba: \"ABW\",\r\n  Australia: \"AUS\",\r\n  Austria: \"AUT\",\r\n  Azerbaijan: \"AZE\",\r\n  Bahamas: \"BHS\",\r\n  Bahrain: \"BHR\",\r\n  Bangladesh: \"BGD\",\r\n  Barbados: \"BRB\",\r\n  Belarus: \"BLR\",\r\n  Belgium: \"BEL\",\r\n  Belize: \"BLZ\",\r\n  Benin: \"BEN\",\r\n  Bermuda: \"BMU\",\r\n  Bhutan: \"BTN\",\r\n  Bolivia: \"BOL\",\r\n  \"Bosnia and Herzegovina\": \"BIH\",\r\n  Botswana: \"BWA\",\r\n  Brazil: \"BRA\",\r\n  \"British Indian Ocean Territory\": \"IOT\",\r\n  \"British Virgin Islands\": \"VGB\",\r\n  Brunei: \"BRN\",\r\n  Bulgaria: \"BGR\",\r\n  \"Burkina Faso\": \"BFA\",\r\n  Burundi: \"BDI\",\r\n  Cambodia: \"KHM\",\r\n  Cameroon: \"CMR\",\r\n  Canada: \"CAN\",\r\n  \"Cape Verde\": \"CPV\",\r\n  \"Cayman Islands\": \"CYM\",\r\n  \"Central African Republic\": \"CAF\",\r\n  Chad: \"TCD\",\r\n  Chile: \"CHL\",\r\n  China: \"CHN\",\r\n  \"Christmas Island\": \"CXR\",\r\n  \"Cocos Islands\": \"CCK\",\r\n  Colombia: \"COL\",\r\n  Comoros: \"COM\",\r\n  \"Cook Islands\": \"COK\",\r\n  \"Costa Rica\": \"CRI\",\r\n  Croatia: \"HRV\",\r\n  Cuba: \"CUB\",\r\n  Curacao: \"CUW\",\r\n  Cyprus: \"CYP\",\r\n  \"Czech Republic\": \"CZE\",\r\n  Congo: \"COD\",\r\n  Denmark: \"DNK\",\r\n  Djibouti: \"DJI\",\r\n  Dominica: \"DMA\",\r\n  \"Dominican Republic\": \"DOM\",\r\n  \"East Timor\": \"TLS\",\r\n  Ecuador: \"ECU\",\r\n  Egypt: \"EGY\",\r\n  \"El Salvador\": \"SLV\",\r\n  \"Equatorial Guinea\": \"GNQ\",\r\n  Eritrea: \"ERI\",\r\n  Estonia: \"EST\",\r\n  Ethiopia: \"ETH\",\r\n  \"Falkland Islands\": \"FLK\",\r\n  \"Faroe Islands\": \"FRO\",\r\n  Fiji: \"FJI\",\r\n  Finland: \"FIN\",\r\n  France: \"FRA\",\r\n  \"French Polynesia\": \"PYF\",\r\n  Gabon: \"GAB\",\r\n  Gambia: \"GMB\",\r\n  Georgia: \"GEO\",\r\n  Germany: \"DEU\",\r\n  Ghana: \"GHA\",\r\n  Gibraltar: \"GIB\",\r\n  Greece: \"GRC\",\r\n  Greenland: \"GRL\",\r\n  Grenada: \"GRD\",\r\n  Guam: \"GUM\",\r\n  Guatemala: \"GTM\",\r\n  Guernsey: \"GGY\",\r\n  Guinea: \"GIN\",\r\n  \"Guinea-Bissau\": \"GNB\",\r\n  Guyana: \"GUY\",\r\n  Haiti: \"HTI\",\r\n  Honduras: \"HND\",\r\n  \"Hong Kong\": \"HKG\",\r\n  Hungary: \"HUN\",\r\n  Iceland: \"ISL\",\r\n  India: \"IND\",\r\n  Indonesia: \"IDN\",\r\n  Iran: \"IRN\",\r\n  Iraq: \"IRQ\",\r\n  Ireland: \"IRL\",\r\n  \"Isle of Man\": \"IMN\",\r\n  Israel: \"ISR\",\r\n  Italy: \"ITA\",\r\n  \"Ivory Coast\": \"CIV\",\r\n  Jamaica: \"JAM\",\r\n  Japan: \"JPN\",\r\n  Jersey: \"JEY\",\r\n  Jordan: \"JOR\",\r\n  Kazakhstan: \"KAZ\",\r\n  Kenya: \"KEN\",\r\n  Kiribati: \"KIR\",\r\n  Kosovo: \"XKX\",\r\n  Kuwait: \"KWT\",\r\n  Kyrgyzstan: \"KGZ\",\r\n  Laos: \"LAO\",\r\n  Latvia: \"LVA\",\r\n  Lebanon: \"LBN\",\r\n  Lesotho: \"LSO\",\r\n  Liberia: \"LBR\",\r\n  Libya: \"LBY\",\r\n  Liechtenstein: \"LIE\",\r\n  Lithuania: \"LTU\",\r\n  Luxembourg: \"LUX\",\r\n  Macau: \"MAC\",\r\n  Macedonia: \"MKD\",\r\n  Madagascar: \"MDG\",\r\n  Malawi: \"MWI\",\r\n  Malaysia: \"MYS\",\r\n  Maldives: \"MDV\",\r\n  Mali: \"MLI\",\r\n  Malta: \"MLT\",\r\n  \"Marshall Islands\": \"MHL\",\r\n  Mauritania: \"MRT\",\r\n  Mauritius: \"MUS\",\r\n  Mayotte: \"MYT\",\r\n  Mexico: \"MEX\",\r\n  Micronesia: \"FSM\",\r\n  Moldova: \"MDA\",\r\n  Monaco: \"MCO\",\r\n  Mongolia: \"MNG\",\r\n  Montenegro: \"MNE\",\r\n  Montserrat: \"MSR\",\r\n  Morocco: \"MAR\",\r\n  Mozambique: \"MOZ\",\r\n  Myanmar: \"MMR\",\r\n  Namibia: \"NAM\",\r\n  Nauru: \"NRU\",\r\n  Nepal: \"NPL\",\r\n  Netherlands: \"NLD\",\r\n  \"Netherlands Antilles\": \"ANT\",\r\n  \"New Caledonia\": \"NCL\",\r\n  \"New Zealand\": \"NZL\",\r\n  Nicaragua: \"NIC\",\r\n  Niger: \"NER\",\r\n  Nigeria: \"NGA\",\r\n  Niue: \"NIU\",\r\n  \"North Korea\": \"PRK\",\r\n  \"Northern Mariana Islands\": \"MNP\",\r\n  Norway: \"NOR\",\r\n  Oman: \"OMN\",\r\n  Pakistan: \"PAK\",\r\n  Palau: \"PLW\",\r\n  Palestine: \"PSE\",\r\n  Panama: \"PAN\",\r\n  \"Papua New Guinea\": \"PNG\",\r\n  Paraguay: \"PRY\",\r\n  Peru: \"PER\",\r\n  Philippines: \"PHL\",\r\n  Pitcairn: \"PCN\",\r\n  Poland: \"POL\",\r\n  Portugal: \"PRT\",\r\n  \"Puerto Rico\": \"PRI\",\r\n  Qatar: \"QAT\",\r\n  \"Republic of the Congo\": \"COG\",\r\n  Reunion: \"REU\",\r\n  Romania: \"ROU\",\r\n  Russia: \"RUS\",\r\n  Rwanda: \"RWA\",\r\n  \"Saint Barthelemy\": \"BLM\",\r\n  \"Saint Helena\": \"SHN\",\r\n  \"Saint Kitts and Nevis\": \"KNA\",\r\n  \"Saint Lucia\": \"LCA\",\r\n  \"Saint Martin\": \"MAF\",\r\n  \"Saint Pierre and Miquelon\": \"SPM\",\r\n  \"Saint Vincent and the Grenadines\": \"VCT\",\r\n  Samoa: \"WSM\",\r\n  \"San Marino\": \"SMR\",\r\n  \"Sao Tome and Principe\": \"STP\",\r\n  \"Saudi Arabia\": \"SAU\",\r\n  Senegal: \"SEN\",\r\n  Serbia: \"SRB\",\r\n  Seychelles: \"SYC\",\r\n  \"Sierra Leone\": \"SLE\",\r\n  Singapore: \"SGP\",\r\n  \"Sint Maarten\": \"SXM\",\r\n  Slovakia: \"SVK\",\r\n  Slovenia: \"SVN\",\r\n  \"Solomon Islands\": \"SLB\",\r\n  Somalia: \"SOM\",\r\n  \"South Africa\": \"ZAF\",\r\n  \"South Korea\": \"KOR\",\r\n  \"South Sudan\": \"SSD\",\r\n  Spain: \"ESP\",\r\n  \"Sri Lanka\": \"LKA\",\r\n  Sudan: \"SDN\",\r\n  Suriname: \"SUR\",\r\n  \"Svalbard and Jan Mayen\": \"SJM\",\r\n  Swaziland: \"SWZ\",\r\n  Sweden: \"SWE\",\r\n  Switzerland: \"CHE\",\r\n  Syria: \"SYR\",\r\n  Taiwan: \"TWN\",\r\n  Tajikistan: \"TJK\",\r\n  Tanzania: \"TZA\",\r\n  Thailand: \"THA\",\r\n  Togo: \"TGO\",\r\n  Tokelau: \"TKL\",\r\n  Tonga: \"TON\",\r\n  \"Trinidad and Tobago\": \"TTO\",\r\n  Tunisia: \"TUN\",\r\n  Turkey: \"TUR\",\r\n  Turkmenistan: \"TKM\",\r\n  \"Turks and Caicos Islands\": \"TCA\",\r\n  Tuvalu: \"TUV\",\r\n  \"U.S. Virgin Islands\": \"VIR\",\r\n  Uganda: \"UGA\",\r\n  Ukraine: \"UKR\",\r\n  \"United Arab Emirates\": \"ARE\",\r\n  \"United Kingdom\": \"GBR\",\r\n  \"United States\": \"USA\",\r\n  Uruguay: \"URY\",\r\n  Uzbekistan: \"UZB\",\r\n  Vanuatu: \"VUT\",\r\n  Vatican: \"VAT\",\r\n  Venezuela: \"VEN\",\r\n  Vietnam: \"VNM\",\r\n  \"Wallis and Futuna\": \"WLF\",\r\n  \"Western Sahara\": \"ESH\",\r\n  Yemen: \"YEM\",\r\n  Zambia: \"ZMB\",\r\n  Zimbabwe: \"ZWE\",\r\n};\r\n","export const statsFields = {\r\n  profit: \"Total Profit\",\r\n  users: \"Active users\",\r\n  orders: \"New orders\",\r\n  complaints: \"Open complaints\",\r\n};\r\n\r\nexport const statsPeriods = {\r\n  today: \"Today\",\r\n  yesterday: \"Yesterday\",\r\n  week: \"Last Week\",\r\n  month: \"Last Month\",\r\n  year: \"Last Year\",\r\n};\r\n\r\nexport const months = {\r\n  0: \"all months\",\r\n  1: \"january\",\r\n  2: \"february\",\r\n  3: \"march\",\r\n  4: \"april\",\r\n  5: \"may\",\r\n  6: \"june\",\r\n  7: \"july\",\r\n  8: \"august\",\r\n  9: \"september\",\r\n  10: \"october\",\r\n  11: \"november\",\r\n  12: \"december\",\r\n};\r\n\r\nexport const analyticsPanels = [\"histogram\", \"map\", \"summary\"];","import countryCodes from \"./countryCodes\";\r\nimport {statsFields, months} from \"./dataHelpers\";\r\n\r\nexport const getRandom = (bottomLimit, upperLimit) => {\r\n  return (\r\n    Math.floor(Math.random() * (upperLimit - bottomLimit + 1)) + bottomLimit\r\n  );\r\n};\r\n\r\nexport const getDateString = (date) => date.toISOString().slice(0, 10);\r\n\r\nexport const getDateFormatted = (date) => {\r\n  return date.toISOString().slice(0, 10);\r\n};\r\n\r\nexport const getBreakpointDates = (range) => {\r\n  const now = new Date();\r\n  const offsets = {\r\n    today: [0, 0, 1, 0],\r\n    yesterday: [1, 0, 1, 0],\r\n    week: [1, 6, 1, 6],\r\n    month: [1, 27, 1, 27],\r\n    year: [1, 364, 1, 364],\r\n  };\r\n\r\n  return Object.entries(offsets)\r\n    .find(([key, value]) => key === range)[1]\r\n    .map((offset) =>\r\n      getDateString(new Date(now.setDate(now.getDate() - offset)))\r\n    );\r\n};\r\n\r\nexport const getTotalInTimeRange = (data, type, breakpointDates) => {\r\n  let lastPeriodTotal = 0;\r\n  let prevPeriodTotal = 0;\r\n\r\n  const [\r\n    lastPeriodEndDate,\r\n    lastPeriodStartDate,\r\n    prevPeriodEndDate,\r\n    prevPeriodStartDate,\r\n  ] = breakpointDates;\r\n\r\n  /* iterating through all countries */\r\n  Object.values(data).forEach((country) => {\r\n    const prevStartIndex = Object.keys(country).findIndex(\r\n      (key) => key === prevPeriodStartDate\r\n    );\r\n    const prevEndIndex = Object.keys(country).findIndex(\r\n      (key) => key === prevPeriodEndDate\r\n    );\r\n    const lastStartIndex = Object.keys(country).findIndex(\r\n      (key) => key === lastPeriodStartDate\r\n    );\r\n    const lastEndIndex = Object.keys(country).findIndex(\r\n      (key) => key === lastPeriodEndDate\r\n    );\r\n\r\n    prevPeriodTotal += Object.values(country)\r\n      .map((date) => date[type])\r\n      .reduce((acc, curr, index) => {\r\n        if (index >= prevStartIndex && index <= prevEndIndex) {\r\n          acc += curr;\r\n        }\r\n        return acc;\r\n      }, 0);\r\n\r\n    lastPeriodTotal += Object.values(country)\r\n      .map((date) => date[type])\r\n      .reduce((acc, curr, index) => {\r\n        if (index >= lastStartIndex && index <= lastEndIndex) {\r\n          acc += curr;\r\n        }\r\n        return acc;\r\n      }, 0);\r\n  });\r\n\r\n  const percentage = (lastPeriodTotal / prevPeriodTotal - 1).toFixed(1);\r\n  return [lastPeriodTotal, percentage];\r\n};\r\n\r\nexport const getYears = (data) => {\r\n  const currentYear = new Date().getFullYear();\r\n  const years = Object.values(data).map(\r\n    (country) => Object.keys(country)[0].split(\"-\")[0]\r\n  );\r\n  const firstYear = parseInt([...new Set([...years])].sort()[0]);\r\n  const allYears = [];\r\n  for (let i = firstYear; i <= currentYear; i++) {\r\n    allYears.push(i);\r\n  }\r\n  return allYears.sort((a, b) => b - a);\r\n};\r\n\r\nexport const getColorRgb = (id) => {\r\n  const svgIcon = document.querySelector(`svg[class*=${id}]`);\r\n  const style = window.getComputedStyle(svgIcon);\r\n  return style.getPropertyValue(\"background-color\");\r\n};\r\n\r\nconst getColor = (id) => {\r\n  const svgIcon = document.querySelector(`svg[class*=${id}]`);\r\n  const style = window.getComputedStyle(svgIcon);\r\n  const color = style.getPropertyValue(\"background-color\");\r\n  return color.match(/\\d+/g);\r\n};\r\n\r\nconst getDateIds = (array, isYearly) => {\r\n  const allDaysAsDates = array.map(([elem]) => elem);\r\n  const daysAsDates = [...new Set(allDaysAsDates)];\r\n  const allMonthsAsDates = daysAsDates.map((date) =>\r\n    date.split(\"-\").slice(0, 2).join(\"-\")\r\n  );\r\n  const monthsAsDates = [...new Set(allMonthsAsDates)];\r\n  return isYearly ? monthsAsDates : daysAsDates;\r\n};\r\n\r\nconst getSpecificData = (data, field, month, year, isAllBefore = false) => {\r\n  const monthNum = parseInt(month);\r\n  const yearNum = parseInt(year);\r\n  const histArray = [];\r\n  /* HIST DATA */\r\n  Object.values(data).forEach((datesObj) => {\r\n    histArray.push(...Object.entries(datesObj));\r\n  });\r\n  // get filtered and sorted array of all date-value elements\r\n  // in a given time range (if there's more than one country\r\n  // there will be many duplicates of the same date key)\r\n  const filteredHistArray = histArray\r\n    .filter(([date]) => {\r\n      const [y, m] = date.split(\"-\").map((elem) => parseInt(elem));\r\n\r\n      if (isAllBefore) {\r\n        return y < yearNum || (y === yearNum && m < monthNum);\r\n      } else {\r\n        return monthNum === 0 ? y === yearNum : m === monthNum && y === yearNum;\r\n      }\r\n    })\r\n    .sort(([dateA], [dateB]) => {\r\n      const getNum = (date) => parseInt(date.split(\"-\").join(\"\"));\r\n      return getNum(dateA) - getNum(dateB);\r\n    });\r\n\r\n  // get date keys in format yyyy-mm-dd for days\r\n  // or yyyy-mm for months\r\n  const isYearly = monthNum === 0;\r\n  const dateStrings = getDateIds(filteredHistArray, isYearly);\r\n\r\n  const histData = dateStrings.map((dateString, index) => {\r\n    const value = filteredHistArray\r\n      .filter(([date]) => date.includes(dateString))\r\n      .map(([date, values]) => values[field])\r\n      .reduce((a, b) => a + b, 0);\r\n\r\n    return {\r\n      id: `${index + 1} ${months[month]}`,\r\n      [field]: value,\r\n    };\r\n  });\r\n  return histData;\r\n};\r\n\r\nexport const getAnalyticsData = (data, field, month, year) => {\r\n  const mapData = {};\r\n  const countriesTotals = {};\r\n  const [r, g, b] = getColor(field);\r\n  const monthNum = parseInt(month);\r\n  const yearNum = parseInt(year);\r\n\r\n  Object.entries(data).forEach(([countryName, values]) => {\r\n    countriesTotals[countryName] = Object.entries(values)\r\n      .filter(([date]) => {\r\n        //* refactor\r\n        const [y, m] = date.split(\"-\").map((elem) => parseInt(elem));\r\n        return monthNum === 0 ? y === yearNum : m === monthNum && y === yearNum;\r\n      })\r\n      .map(([date, values]) => values[field])\r\n      .reduce((acc, curr) => acc + curr, 0);\r\n  });\r\n\r\n  const totalsArray = Object.values(countriesTotals);\r\n  const maxTotal = Math.max(...totalsArray);\r\n  const allCountriesTotal = totalsArray.reduce((a, b) => a + b, 0);\r\n\r\n  /* MAP DATA */\r\n  Object.keys(data).forEach((countryName) => {\r\n    const countryCode = countryCodes[countryName];\r\n    if (countryCode) {\r\n      const countryTotal = countriesTotals[countryName];\r\n      const countryPercent = (countryTotal / allCountriesTotal) * 100;\r\n      const minOpacity = 0.1;\r\n      const opacity = (countryTotal / maxTotal) * (1 - minOpacity) + minOpacity;\r\n\r\n      if (countryTotal) {\r\n        mapData[countryCode] = {\r\n          fillColor: `rgba(${r},${g},${b},${opacity})`,\r\n          countryTotal,\r\n          countryPercent,\r\n          field,\r\n        };\r\n      }\r\n    }\r\n  });\r\n\r\n  /* HISTOGRAM DATA */\r\n  const histData = getSpecificData(data, field, month, year);\r\n  return [mapData, histData];\r\n};\r\n\r\n/* SUMMARY DATA */\r\nexport const getSummaryData = (data, month, year) => {\r\n  const getFieldTotals = () => {\r\n    const array = [];\r\n    for (let field in statsFields) {\r\n      const beforeTotal = getTotal(field, true);\r\n      const currentTotal = getTotal(field, false);\r\n      const allTotal = beforeTotal + currentTotal;\r\n      const beforePercent = (beforeTotal / allTotal) * 100;\r\n      const currentPercent = (currentTotal / allTotal) * 100;\r\n\r\n      array.unshift({\r\n        id: field,\r\n        [`${field}Before`]: beforePercent,\r\n        [`${field}Current`]: currentPercent,\r\n      });\r\n    }\r\n    return array;\r\n  };\r\n\r\n  const getTotal = (field, isAllBefore) => {\r\n    return getSpecificData(data, field, month, year, isAllBefore)\r\n      .map((elem) => elem[field])\r\n      .reduce((a, b) => a + b, 0);\r\n  };\r\n\r\n  return getFieldTotals();\r\n};\r\n","import {getDateString, getRandom} from \"./dataHandlers\";\r\n\r\nexport const countriesList = [\r\n  {\r\n    country: \"Poland\",\r\n    startDate: [2017, 12, 5],\r\n  },\r\n  {\r\n    country: \"United States\",\r\n    startDate: [2018, 5, 24],\r\n  },\r\n];\r\n\r\nexport const getData = (list) => {\r\n  const data = {};\r\n\r\n  list.forEach((item) => {\r\n    const {\r\n      country,\r\n      startDate: [year, month, day],\r\n    } = item;\r\n\r\n    const date = new Date(year, month - 1, day);\r\n    const todaysDate = new Date();\r\n    let dateString = getDateString(date);\r\n    const todaysDateString = getDateString(todaysDate);\r\n\r\n    data[country] = {};\r\n\r\n    // generate data for each consecutive date\r\n    while (dateString !== todaysDateString) {\r\n      date.setDate(date.getDate() + 1);\r\n      dateString = getDateString(date);\r\n      data[country][dateString] = {};\r\n      data[country][dateString].profit = getRandom(-300, 2200);\r\n      data[country][dateString].users = getRandom(0, 80);\r\n      data[country][dateString].orders = getRandom(0, 50);\r\n      data[country][dateString].complaints = getRandom(0, 5);\r\n    }\r\n  });\r\n\r\n  return data;\r\n};\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport icons from \"../assets/icons.svg\";\r\nimport \"../scss/Icon.scss\";\r\n\r\nconst Icon = (props) => {\r\n  const {id, type, isRotated} = props;\r\n  const iconClass = classNames(\"Icon\", `Icon--${id}`, {\r\n    [`Icon--${type}`]: type,\r\n    \"Icon--rotated\": isRotated\r\n  });\r\n  return (\r\n    <svg className={iconClass} viewBox=\"0 0 100 100\">\r\n      <use href={`${icons}#${id}`}></use>\r\n    </svg>\r\n  );\r\n};\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Icon from \"./Icon\";\r\nimport \"../scss/TextPanel.scss\";\r\n\r\nconst TextPanel = (props) => {\r\n  const {id, heading, value, percentage} = props;\r\n  const percentageClass = classNames(\"TextPanel__percentage\", {\r\n    \"TextPanel__percentage--positive\": percentage > 0,\r\n    \"TextPanel__percentage--negative\": percentage < 0,\r\n  });\r\n  const absPercent = Math.abs(percentage);\r\n  const percentValue = absPercent !== 0 ? `${absPercent}%` : \"stable\";\r\n  const isIconRotated = percentage > 0;\r\n\r\n  return (\r\n    <section className={`TextPanel TextPanel--${id}`}>\r\n      {/* HEADER BAR */}\r\n      <header className=\"TextPanel__header\">\r\n        <h3 className=\"TextPanel__heading\">{heading}</h3>\r\n        <Icon id={id} type=\"infographic\" />\r\n      </header>\r\n\r\n      {/* VALUES AND INDICATORS */}\r\n      <p className=\"TextPanel__value\">{value}</p>\r\n      <div className={percentageClass}>\r\n        <Icon id=\"indicator\" isRotated={isIconRotated} />\r\n        <span>{percentValue}</span>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default TextPanel;\r\n","import React from \"react\";\r\nimport Icon from \"./Icon\";\r\nimport \"../scss/VisualPanel.scss\";\r\n\r\nconst VisualPanel = (props) => {\r\n  const {id, heading, isMaximized, onMaximize} = props;\r\n  const iconId = isMaximized ? \"minimize\" : \"maximize\";\r\n\r\n  return (\r\n    <section className={`VisualPanel VisualPanel--${id}`}>\r\n      <header className=\"VisualPanel__header\">\r\n        <h3 className=\"VisualPanel__heading\">{heading}</h3>\r\n        <button\r\n          className=\"VisualPanel__button\"\r\n          onClick={() => onMaximize(id)}>\r\n          <Icon id={iconId} />\r\n        </button>\r\n      </header>\r\n      {props.children}\r\n    </section>\r\n  );\r\n};\r\nexport default VisualPanel;\r\n","import React, {Component} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Icon from \"./Icon\";\r\nimport \"../scss/Dropdown.scss\";\r\n\r\nclass Dropdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.dropdown = React.createRef();\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    document.addEventListener(\"mousedown\", this.exitDropdownMenu, false);\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    document.removeEventListener(\"mousedown\", this.exitDropdownMenu, false);\r\n  };\r\n\r\n  exitDropdownMenu = (e) => {\r\n    if (this.state.isOpen && !this.dropdown.current.contains(e.target)) {\r\n      this.toggleDropdown();\r\n    }\r\n  };\r\n\r\n  toggleDropdown = () => {\r\n    this.setState((prevState) => ({\r\n      isOpen: !prevState.isOpen,\r\n    }));\r\n  };\r\n\r\n  handleMenu = (item) => {\r\n    const {type, onMenuClick} = this.props;\r\n    this.toggleDropdown();\r\n    type === \"period\" ? onMenuClick(item) : onMenuClick(type, item);\r\n  };\r\n\r\n  renderMenu = () => {\r\n    const {menuList} = this.props;\r\n    const isListAnArray = Array.isArray(menuList);\r\n    const menuItems = isListAnArray ? menuList : Object.keys(menuList);\r\n\r\n    return (\r\n      <ul className=\"Dropdown__list\">\r\n        {menuItems.map((item) => {\r\n          const label = isListAnArray ? item : menuList[item];\r\n\r\n          return (\r\n            <li key={item} className=\"Dropdown__item\">\r\n              <button\r\n                className=\"Dropdown__button\"\r\n                onClick={() => this.handleMenu(item)}>\r\n                {label}\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {isOpen} = this.state;\r\n    const {type, currentId, menuList} = this.props;\r\n    const label = Array.isArray(menuList) ? currentId : menuList[currentId];\r\n\r\n    const buttonClass = classNames(\"Dropdown__button\", {\r\n      \"Dropdown__button--active\": isOpen,\r\n    });\r\n\r\n    return (\r\n      <div className={`Dropdown Dropdown--${type}`} ref={this.dropdown}>\r\n        <button className={buttonClass} onClick={this.toggleDropdown}>\r\n          <span className=\"Dropdown__label\">{label}</span>\r\n          <Icon id=\"dropdown\" isRotated={isOpen} />\r\n        </button>\r\n        {isOpen && this.renderMenu()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport Icon from \"./Icon\";\r\nimport \"../scss/Button.scss\";\r\n\r\nconst Button = (props) => {\r\n  const {id} = props;\r\n  return (\r\n    <button className={`Button Button--${id}`}>\r\n      <span className=\"Button__text\">{id}</span>\r\n      <Icon id={id} type=\"infographic\" />\r\n    </button>\r\n  );\r\n};\r\nexport default Button;\r\n","import React from \"react\";\r\nimport {statsFields, months} from \"../lib/dataHelpers\";\r\nimport {ResponsiveBar} from \"@nivo/bar\";\r\nimport \"../scss/Histogram.scss\";\r\n\r\nconst Histogram = (props) => {\r\n  const {\r\n    data,\r\n    keys,\r\n    type,\r\n    layout,\r\n    margin,\r\n    axisRight = null,\r\n    axisBottom = null,\r\n    colors,\r\n    enableGridX = false,\r\n    enableGridY = false,\r\n  } = props;\r\n\r\n  const theme = {\r\n    axis: {\r\n      textColor: \"#fff\",\r\n      textTransform: \"uppercase\",\r\n      tickColor: \"#fff\",\r\n      ticks: {\r\n        line: {\r\n          stroke: \"fff\",\r\n        },\r\n        text: {\r\n          fill: \"#555\",\r\n          fontWeight: \"bold\",\r\n          fontFamily: \"Nunito\",\r\n          fontSize: \"11px\",\r\n          textTransform: \"uppercase\",\r\n        },\r\n      },\r\n    },\r\n    grid: {\r\n      line: {\r\n        stroke: \"#fff\",\r\n        strokeWidth: 3,\r\n        strokeDasharray: \"3 3\",\r\n      },\r\n    },\r\n    tooltip: {\r\n      container: {\r\n        padding: \"10px 15px\",\r\n        borderRadius: \"5px\",\r\n        boxShadow: \"0 2px 5px rgba(0,0,0,0.3)\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const axisLeft = {\r\n    tickSize: 5,\r\n    tickPadding: 5,\r\n    tickRotation: 0,\r\n    tickValues: 3,\r\n  };\r\n\r\n  const tooltip = (tooltipData) => {\r\n    const {id, value, indexValue} = tooltipData;\r\n    const monthName =\r\n      type === \"histogram\" && indexValue.includes(\"all\")\r\n        ? months[parseInt(indexValue)]\r\n        : null;\r\n\r\n    const heading =\r\n      type === \"histogram\"\r\n        ? `${statsFields[id]}: ${value}${id === \"profit\" ? \" $\" : \"\"}`\r\n        : `${indexValue}: ${value.toFixed(1)}%`;\r\n\r\n    const text =\r\n      type === \"histogram\"\r\n        ? monthName ? monthName : `Date: ${indexValue}`\r\n        : `${\r\n            id === \"before\" ? \"Before current period\" : \"During current period\"\r\n          }`;\r\n\r\n    return (\r\n      <div className=\"tooltip\">\r\n        <h4 className=\"tooltip__heading\">{heading}</h4>\r\n        <p className=\"tooltip__text\">{text}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"Histogram\">\r\n      <ResponsiveBar\r\n        data={data}\r\n        keys={keys}\r\n        indexBy=\"id\"\r\n        margin={margin}\r\n        padding={0.6}\r\n        innerPadding={5}\r\n        layout={layout}\r\n        colors={colors}\r\n        colorBy=\"id\"\r\n        borderColor={{from: \"color\", modifiers: [[\"darker\", \"1.6\"]]}}\r\n        axisTop={null}\r\n        axisRight={axisRight}\r\n        axisBottom={axisBottom}\r\n        axisLeft={axisLeft}\r\n        enableLabel={false}\r\n        enableGridX={enableGridX}\r\n        enableGridY={enableGridY}\r\n        gridXValues={[20, 40, 60, 80]}\r\n        gridYValues={5}\r\n        labelSkipWidth={12}\r\n        labelSkipHeight={12}\r\n        labelTextColor={{from: \"color\", modifiers: [[\"darker\", 1.6]]}}\r\n        legends={[]}\r\n        tooltip={tooltip}\r\n        theme={theme}\r\n        animate={true}\r\n        motionStiffness={90}\r\n        motionDamping={15}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Histogram;\r\n","import React, {Component} from \"react\";\r\nimport Datamaps from \"datamaps\";\r\nimport d3 from \"d3\";\r\nimport \"../scss/Histogram.scss\";\r\nimport \"../scss/Map.scss\";\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.container = React.createRef();\r\n  }\r\n\r\n  resize = () => {\r\n    if (this.map) {\r\n      this.map.resize();\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.drawMap();\r\n    window.addEventListener(\"resize\", this.resize);\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    this.clear();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.drawMap();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.clear();\r\n    window.removeEventListener(\"resize\", this.resize);\r\n  }\r\n\r\n  clear = () => {\r\n    const container = this.container.current;\r\n    for (const child of Array.from(container.childNodes)) {\r\n      container.removeChild(child);\r\n    }\r\n  };\r\n\r\n  drawMap = () => {\r\n    const {data} = this.props;\r\n\r\n    const map = new Datamaps(\r\n      Object.assign(\r\n        {},\r\n        {\r\n          ...this.props,\r\n        },\r\n        {\r\n          element: this.container.current,\r\n          projection: \"mercator\",\r\n          responsive: true,\r\n          fills: {\r\n            defaultFill: \"#fff\",\r\n          },\r\n          data,\r\n          geographyConfig: {\r\n            borderWidth: 0.5,\r\n            borderOpacity: 1,\r\n            borderColor: \"#fff\",\r\n            // don't change color on mouse hover\r\n            highlightFillColor: function (geo) {\r\n              return geo[\"fillColor\"] || \"#fff\";\r\n            },\r\n            highlightBorderColor: function (geo) {\r\n              return geo.field ? \"#555\" : \"#fff\";\r\n            },\r\n            highlightBorderWidth: 1,\r\n\r\n            // show desired information in tooltip\r\n            popupTemplate: function (geo, data) {\r\n              const {countryPercent, field} = data;\r\n              if (!data) return;\r\n              return `\r\n                <div class=\"hoverinfo tooltip\">\r\n                  <h4 class=\"tooltip__heading\">${geo.properties.name}</h4>\r\n                  <p class=\"tooltip__text\">${field}: ${data.countryTotal}</p>\r\n                  <p class=\"tooltip__text\">Share: ${countryPercent.toFixed(\r\n                    1\r\n                  )}%</p>\r\n                </div>            \r\n              `;\r\n            },\r\n          },\r\n          done: function (datamap) {\r\n            datamap.svg.call(\r\n              d3.behavior.zoom().scaleExtent([1, 10]).on(\"zoom\", redraw)\r\n            );\r\n            function redraw() {\r\n              datamap.svg\r\n                .selectAll(\"g\")\r\n                .attr(\r\n                  \"transform\",\r\n                  \"translate(\" +\r\n                    d3.event.translate +\r\n                    \")scale(\" +\r\n                    d3.event.scale +\r\n                    \")\"\r\n                );\r\n            }\r\n          },\r\n        }\r\n      )\r\n    );\r\n    this.map = map;\r\n    this.container.current.style.paddingBottom = 0;\r\n  };\r\n\r\n  render() {\r\n    return <div ref={this.container} className=\"Map\"></div>;\r\n  }\r\n}\r\nexport default Map;\r\n","import React, {Component} from \"react\";\nimport classNames from \"classnames\";\nimport {countriesList, getData} from \"../lib/dataGenerator\";\nimport * as dataHandlers from \"../lib/dataHandlers\";\nimport * as dataHelpers from \"../lib/dataHelpers\";\nimport TextPanel from \"./TextPanel\";\nimport VisualPanel from \"./VisualPanel\";\nimport Dropdown from \"./Dropdown\";\nimport Button from \"./Button\";\nimport Histogram from \"./Histogram\";\nimport Map from \"./Map\";\nimport \"../scss/App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.date = new Date();\n    this.state = {\n      data: getData(countriesList),\n      profit: {},\n      users: {},\n      orders: {},\n      complaints: {},\n      stats: {\n        period: \"month\",\n        lastPeriodEndDate: \"\",\n        lastPeriodStartDate: \"\",\n        prevPeriodEndDate: \"\",\n        prevPeriodStartDate: \"\",\n      },\n      analytics: {\n        field: \"profit\",\n        month: this.date.getMonth() + 1,\n        year: this.date.getFullYear(),\n        mapData: {},\n        histData: [],\n        summaryData: [],\n      },\n      yearsArray: [],\n      colors: {},\n      maximizedPanel: null,\n    };\n  }\n\n  componentDidMount = () => {\n    const {\n      data,\n      stats: {period},\n      analytics,\n      analytics: {field, month, year},\n    } = this.state;\n    const {getAnalyticsData, getSummaryData, getColorRgb} = dataHandlers;\n    const {statsFields} = dataHelpers;\n    const [mapData, histData] = getAnalyticsData(data, field, month, year);\n    const summaryData = getSummaryData(data, month, year);\n    const colors = {};\n    Object.keys(statsFields).forEach(\n      (field) => (colors[field] = getColorRgb(field))\n    );\n\n    this.handleStats(period);\n    this.setState({\n      yearsArray: dataHandlers.getYears(data),\n      analytics: {\n        ...analytics,\n        mapData,\n        histData,\n        summaryData,\n      },\n      colors,\n    });\n  };\n\n  handleStats = (period) => {\n    const {data} = this.state;\n    const {getTotalInTimeRange, getBreakpointDates} = dataHandlers;\n    const {statsFields} = dataHelpers;\n\n    const breakpointDates = getBreakpointDates(period);\n    const [\n      lastPeriodEndDate,\n      lastPeriodStartDate,\n      prevPeriodEndDate,\n      prevPeriodStartDate,\n    ] = breakpointDates;\n\n    Object.keys(statsFields).forEach((field) => {\n      const statsOutput = getTotalInTimeRange(data, field, breakpointDates);\n      const [lastPeriodTotal, percentage] = statsOutput;\n\n      this.setState({\n        [field]: {\n          value: `${field === \"profit\" ? \"$ \" : \"\"}${lastPeriodTotal}`,\n          percentage,\n        },\n      });\n    });\n\n    const stats = {\n      period,\n      lastPeriodEndDate,\n      lastPeriodStartDate,\n      prevPeriodEndDate,\n      prevPeriodStartDate,\n    };\n    this.setState({stats});\n  };\n\n  handleAnalytics = (type, id) => {\n    console.log(\"id\", id);\n    console.log(\"type\", type);\n    const {data, analytics} = this.state;\n    let {field, month, year} = this.state.analytics;\n    const {getAnalyticsData, getSummaryData, getColorRgb} = dataHandlers;\n\n    field = type === \"field\" ? id : field;\n    month = type === \"month\" ? id : month;\n    year = type === \"year\" ? id : year;\n    const [mapData, histData] = getAnalyticsData(data, field, month, year);\n    const summaryData =\n      type === \"month\" || type === \"year\"\n        ? getSummaryData(data, month, year)\n        : analytics.summaryData;\n    const accentColor =\n      type === \"field\" ? getColorRgb(id) : this.state.accentColor;\n\n    this.setState({\n      analytics: {\n        ...analytics,\n        [type]: id,\n        mapData,\n        histData,\n        summaryData,\n      },\n      accentColor,\n    });\n  };\n\n  renderAnalytics = (type) => {\n    const {\n      analytics: {field, mapData, histData, summaryData},\n      colors,\n    } = this.state;\n\n    switch (type) {\n      case \"histogram\":\n        return (\n          <Histogram\n            data={histData}\n            keys={[field]}\n            type=\"histogram\"\n            layout=\"vertical\"\n            margin={{top: 60, right: 30, bottom: 30, left: 60}}\n            colors={colors[field]}\n            enableGridY={true}\n          />\n        );\n\n      case \"map\":\n        return <Map data={mapData} />;\n\n      case \"summary\":\n        return (\n          <Histogram\n            data={summaryData}\n            keys={[\n              \"profitBefore\",\n              \"profitCurrent\",\n              \"usersBefore\",\n              \"usersCurrent\",\n              \"ordersBefore\",\n              \"ordersCurrent\",\n              \"complaintsBefore\",\n              \"complaintsCurrent\",\n            ]}\n            type=\"summary\"\n            layout=\"horizontal\"\n            margin={{top: 60, right: 30, bottom: 50, left: 100}}\n            colors={[\n              \"#fff\",\n              colors.profit,\n              \"#fff\",\n              colors.users,\n              \"#fff\",\n              colors.orders,\n              \"#fff\",\n              colors.complaints,\n            ]}\n            enableGridX={true}\n            axisBottom={{\n              tickSize: 5,\n              tickPadding: 5,\n              tickRotation: 0,\n              tickValues: [20, 40, 60, 80],\n            }}\n          />\n        );\n\n      default:\n        return false;\n    }\n  };\n\n  handleMaximize = (id) => {\n    this.setState((prevState) => ({\n      maximizedPanel: prevState.maximizedPanel === id ? null : id,\n    }));\n  };\n\n  render() {\n    const {\n      stats: {\n        period,\n        lastPeriodEndDate,\n        lastPeriodStartDate,\n        prevPeriodEndDate,\n        prevPeriodStartDate,\n      },\n      analytics: {field, month, year},\n      yearsArray,\n      maximizedPanel,\n    } = this.state;\n\n    const {statsFields, statsPeriods, months, analyticsPanels} = dataHelpers;\n    const statsDescription = `${lastPeriodStartDate} - ${lastPeriodEndDate} vs.\n    ${prevPeriodStartDate} - ${prevPeriodEndDate}`;\n\n    const dropdownsLists = {\n      field: [statsFields, field],\n      month: [months, month],\n      year: [yearsArray, year],\n    };\n\n    const analyticsClass = classNames(\n      \"App__section\",\n      \"App__section--analytics\",\n      {\n        [`App__section--${maximizedPanel}Max`]: maximizedPanel,\n      }\n    );\n\n    return (\n      <main className=\"App\">\n        <h1 className=\"App__heading\">dashboard</h1>\n\n        {/* LATEST STATS SECTION */}\n        <section className=\"App__section App__section--stats\">\n          {/* LATEST STATS HEADER */}\n          <header className=\"App__header App__header--stats\">\n            <h2 className=\"App__heading\">Latest Stats</h2>\n            <p className=\"App__info\">{statsDescription}</p>\n            <Dropdown\n              currentId={period}\n              type=\"period\"\n              menuList={statsPeriods}\n              onMenuClick={this.handleStats}\n            />\n          </header>\n\n          {/* LATEST STATS TEXT PANELS */}\n          {Object.entries(statsFields).map(([field, heading]) => {\n            const {value, percentage} = this.state[field];\n\n            return (\n              <TextPanel\n                key={field}\n                id={field}\n                heading={heading}\n                value={value}\n                percentage={percentage}\n              />\n            );\n          })}\n        </section>\n\n        {/* ANALYTICS SECTION */}\n        <section className={analyticsClass}>\n          {/* ANALYTICS HEADER */}\n          <header className=\"App__header App__header--analytics\">\n            <h2 className=\"App__heading\">Analytics</h2>\n            <p className=\"App__info\">Some info</p>\n            {/* DROPDOWNS */}\n            {Object.entries(dropdownsLists).map(([type, [list, id]]) => {\n              return (\n                <Dropdown\n                  key={id}\n                  currentId={id}\n                  type={type}\n                  menuList={list}\n                  onMenuClick={this.handleAnalytics}\n                />\n              );\n            })}\n          </header>\n\n          {/* ANALYTICS CHARTS */}\n          {analyticsPanels.map((panel) => {\n            const isMaximized = this.state.maximizedPanel === panel;\n            return (\n              <VisualPanel\n                key={panel}\n                id={panel}\n                heading={panel}\n                isMaximized={isMaximized}\n                onMaximize={this.handleMaximize}>\n                {this.renderAnalytics(panel)}\n              </VisualPanel>\n            );\n          })}\n\n          {/* ANALYTICS FOOTER */}\n          <footer className=\"App__footer\">\n            <Button id=\"export\" label=\"export\" hasLabel=\"true\" />\n            <Button id=\"print\" label=\"print\" hasLabel=\"true\" />\n          </footer>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}