{"version":3,"sources":["assets/icons.svg","lib/countryCodes.js","lib/dataHelpers.js","lib/dataHandlers.js","lib/dataGenerator.js","lib/countryData.js","components/Icon.js","components/TextPanel.js","components/VisualPanel.js","components/Dropdown.js","components/Button.js","components/Histogram.js","components/Map.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Afghanistan","Albania","Algeria","Andorra","Angola","Anguilla","Antarctica","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Botswana","Brazil","Brunei","Bulgaria","Burundi","Cambodia","Cameroon","Canada","Chad","Chile","China","Colombia","Comoros","Croatia","Cuba","Curacao","Cyprus","Congo","Denmark","Djibouti","Dominica","Ecuador","Egypt","Eritrea","Estonia","Ethiopia","Fiji","Finland","France","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guam","Guatemala","Guernsey","Guinea","Guyana","Haiti","Honduras","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Mauritania","Mauritius","Mayotte","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","Nicaragua","Niger","Nigeria","Niue","Norway","Oman","Pakistan","Palau","Palestine","Panama","Paraguay","Peru","Philippines","Pitcairn","Poland","Portugal","Qatar","Reunion","Romania","Russia","Rwanda","Samoa","Senegal","Serbia","Seychelles","Singapore","Slovakia","Slovenia","Somalia","Spain","Sudan","Suriname","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","Togo","Tokelau","Tonga","Tunisia","Turkey","Turkmenistan","Tuvalu","Uganda","Ukraine","Uruguay","Uzbekistan","Vanuatu","Vatican","Venezuela","Vietnam","Yemen","Zambia","Zimbabwe","statsFields","profit","users","orders","complaints","statsPeriods","today","yesterday","week","month","year","months","0","1","2","3","4","5","6","7","8","9","10","11","12","days","numberSuffixes","analyticsPanels","getRandom","bottomLimit","upperLimit","Math","floor","random","getDateString","date","toISOString","slice","getTimeRanges","dates","period","lastEndDate","lastStartDate","prevEndDate","prevStartDate","getElements","number","split","map","string","parseInt","day","suffix","getDay","letter","index","toUpperCase","join","lastEndDayName","lastEndDay","lastEndSuffix","lastEndMonth","lastEndYear","lastStartDayName","lastStartDay","lastStartSuffix","lastStartMonth","lastStartYear","prevEndDayName","prevEndDay","prevEndSuffix","prevEndMonth","prevEndYear","prevStartDayName","prevStartDay","prevStartSuffix","prevStartMonth","prevStartYear","toLowerCase","getBreakpointDates","range","now","Date","Object","entries","find","key","offset","setDate","getDate","getTotalInTimeRange","data","type","breakpointDates","lastPeriodTotal","prevPeriodTotal","lastPeriodEndDate","lastPeriodStartDate","prevPeriodEndDate","prevPeriodStartDate","values","forEach","country","getIndex","keys","findIndex","lastEndIndex","lastStartIndex","prevEndIndex","prevStartIndex","getPeriodTotal","startIndex","endIndex","reduce","acc","curr","percentage","toFixed","getYears","currentYear","getFullYear","years","allYears","i","Set","sort","push","a","b","getColorRgb","id","svgIcon","document","querySelector","window","getComputedStyle","getPropertyValue","get2digit","autoCompleteDates","array","length","unshift","firstDate","lastDate","firstYear","firstMonth","lastYear","lastMonth","prevMonth","nextMonth","getDateIds","isYearly","allDaysAsDates","daysAsDates","allMonthsAsDates","monthsAsDates","daysOutput","monthsOutput","getMapData","field","mapData","countriesTotals","match","r","g","monthNum","yearNum","countryName","filter","elem","y","m","totalsArray","maxTotal","max","allCountriesTotal","countryCode","countryCodes","countryTotal","countryPercent","opacity","fillColor","getHistData","isAllBefore","histArray","datesObj","filteredHistArray","dateA","dateB","getNum","dateStrings","histData","dateString","value","includes","getSummaryData","getTotal","beforeTotal","currentTotal","allTotal","beforePercent","currentPercent","getFieldTotals","getData","list","item","startDate","todaysDate","todaysDateString","Icon","props","isRotated","iconClass","classNames","className","viewBox","href","icons","TextPanel","componentDidMount","handleValue","componentDidUpdate","intervalId","setState","animatedValue","componentWillUnmount","clearInterval","setInterval","state","increment","ceil","abs","prevState","this","heading","percentageClass","percentValue","isIconRotated","Component","VisualPanel","isMaximized","onMaximize","iconId","onClick","children","Dropdown","addEventListener","exitDropdownMenu","removeEventListener","e","isOpen","dropdown","current","contains","target","toggleDropdown","handleMenu","onMenuClick","renderMenu","menuList","isListAnArray","Array","isArray","menuItems","buttonClass","label","React","createRef","currentId","ref","Button","Histogram","layout","margin","axisRight","axisBottom","colors","enableGridX","enableGridY","color","from","modifiers","indexBy","padding","colorBy","borderColor","axisTop","axisLeft","tickSize","tickPadding","tickRotation","tickValues","enableLabel","gridXValues","gridYValues","labelSkipWidth","labelSkipHeight","labelTextColor","legends","tooltip","tooltipData","indexValue","monthName","text","theme","axis","textColor","textTransform","tickColor","ticks","line","stroke","fill","fontWeight","fontFamily","fontSize","grid","strokeWidth","strokeDasharray","container","borderRadius","boxShadow","animate","motionStiffness","motionDamping","Map","resize","clear","childNodes","child","removeChild","drawMap","Datamaps","assign","element","projection","responsive","fills","defaultFill","geographyConfig","borderWidth","borderOpacity","highlightFillColor","geo","highlightBorderColor","highlightBorderWidth","popupTemplate","properties","name","done","datamap","svg","call","d3","behavior","zoom","scaleExtent","on","selectAll","attr","event","translate","scale","style","paddingBottom","App","stats","analytics","dataHandlers","dataHelpers","summaryData","handleStats","yearsArray","isMounted","statsOutput","timeRanges","handleAnalytics","accentColor","renderAnalytics","top","right","bottom","left","replace","handleMaximize","maximizedPanel","handleExport","filename","file","Blob","navigator","msSaveOrOpenBlob","createElement","url","URL","createObjectURL","download","body","appendChild","click","setTimeout","revokeObjectURL","countriesList","dropdownsLists","analyticsClass","appInfoCurrent","appInfoBefore","panel","JSON","stringify","print","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,mC,6XCA5B,GACbC,YAAa,MACbC,QAAS,MACTC,QAAS,MACT,iBAAkB,MAClBC,QAAS,MACTC,OAAQ,MACRC,SAAU,MACVC,WAAY,MACZ,sBAAuB,MACvBC,UAAW,MACXC,QAAS,MACTC,MAAO,MACPC,UAAW,MACXC,QAAS,MACTC,WAAY,MACZC,QAAS,MACTC,QAAS,MACTC,WAAY,MACZC,SAAU,MACVC,QAAS,MACTC,QAAS,MACTC,OAAQ,MACRC,MAAO,MACPC,QAAS,MACTC,OAAQ,MACRC,QAAS,MACT,yBAA0B,MAC1BC,SAAU,MACVC,OAAQ,MACR,iCAAkC,MAClC,yBAA0B,MAC1BC,OAAQ,MACRC,SAAU,MACV,eAAgB,MAChBC,QAAS,MACTC,SAAU,MACVC,SAAU,MACVC,OAAQ,MACR,aAAc,MACd,iBAAkB,MAClB,2BAA4B,MAC5BC,KAAM,MACNC,MAAO,MACPC,MAAO,MACP,mBAAoB,MACpB,gBAAiB,MACjBC,SAAU,MACVC,QAAS,MACT,eAAgB,MAChB,aAAc,MACdC,QAAS,MACTC,KAAM,MACNC,QAAS,MACTC,OAAQ,MACR,iBAAkB,MAClBC,MAAO,MACPC,QAAS,MACTC,SAAU,MACVC,SAAU,MACV,qBAAsB,MACtB,aAAc,MACdC,QAAS,MACTC,MAAO,MACP,cAAe,MACf,oBAAqB,MACrBC,QAAS,MACTC,QAAS,MACTC,SAAU,MACV,mBAAoB,MACpB,gBAAiB,MACjBC,KAAM,MACNC,QAAS,MACTC,OAAQ,MACR,mBAAoB,MACpBC,MAAO,MACPC,OAAQ,MACRC,QAAS,MACTC,QAAS,MACTC,MAAO,MACPC,UAAW,MACXC,OAAQ,MACRC,UAAW,MACXC,QAAS,MACTC,KAAM,MACNC,UAAW,MACXC,SAAU,MACVC,OAAQ,MACR,gBAAiB,MACjBC,OAAQ,MACRC,MAAO,MACPC,SAAU,MACV,YAAa,MACbC,QAAS,MACTC,QAAS,MACTC,MAAO,MACPC,UAAW,MACXC,KAAM,MACNC,KAAM,MACNC,QAAS,MACT,cAAe,MACfC,OAAQ,MACRC,MAAO,MACP,cAAe,MACfC,QAAS,MACTC,MAAO,MACPC,OAAQ,MACRC,OAAQ,MACRC,WAAY,MACZC,MAAO,MACPC,SAAU,MACVC,OAAQ,MACRC,OAAQ,MACRC,WAAY,MACZC,KAAM,MACNC,OAAQ,MACRC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,MAAO,MACPC,cAAe,MACfC,UAAW,MACXC,WAAY,MACZC,MAAO,MACPC,UAAW,MACXC,WAAY,MACZC,OAAQ,MACRC,SAAU,MACVC,SAAU,MACVC,KAAM,MACNC,MAAO,MACP,mBAAoB,MACpBC,WAAY,MACZC,UAAW,MACXC,QAAS,MACTC,OAAQ,MACRC,WAAY,MACZC,QAAS,MACTC,OAAQ,MACRC,SAAU,MACVC,WAAY,MACZC,WAAY,MACZC,QAAS,MACTC,WAAY,MACZC,QAAS,MACTC,QAAS,MACTC,MAAO,MACPC,MAAO,MACPC,YAAa,MACb,uBAAwB,MACxB,gBAAiB,MACjB,cAAe,MACfC,UAAW,MACXC,MAAO,MACPC,QAAS,MACTC,KAAM,MACN,cAAe,MACf,2BAA4B,MAC5BC,OAAQ,MACRC,KAAM,MACNC,SAAU,MACVC,MAAO,MACPC,UAAW,MACXC,OAAQ,MACR,mBAAoB,MACpBC,SAAU,MACVC,KAAM,MACNC,YAAa,MACbC,SAAU,MACVC,OAAQ,MACRC,SAAU,MACV,cAAe,MACfC,MAAO,MACP,wBAAyB,MACzBC,QAAS,MACTC,QAAS,MACTC,OAAQ,MACRC,OAAQ,MACR,mBAAoB,MACpB,eAAgB,MAChB,wBAAyB,MACzB,cAAe,MACf,eAAgB,MAChB,4BAA6B,MAC7B,mCAAoC,MACpCC,MAAO,MACP,aAAc,MACd,wBAAyB,MACzB,eAAgB,MAChBC,QAAS,MACTC,OAAQ,MACRC,WAAY,MACZ,eAAgB,MAChBC,UAAW,MACX,eAAgB,MAChBC,SAAU,MACVC,SAAU,MACV,kBAAmB,MACnBC,QAAS,MACT,eAAgB,MAChB,cAAe,MACf,cAAe,MACfC,MAAO,MACP,YAAa,MACbC,MAAO,MACPC,SAAU,MACV,yBAA0B,MAC1BC,UAAW,MACXC,OAAQ,MACRC,YAAa,MACbC,MAAO,MACPC,OAAQ,MACRC,WAAY,MACZC,SAAU,MACVC,SAAU,MACVC,KAAM,MACNC,QAAS,MACTC,MAAO,MACP,sBAAuB,MACvBC,QAAS,MACTC,OAAQ,MACRC,aAAc,MACd,2BAA4B,MAC5BC,OAAQ,MACR,sBAAuB,MACvBC,OAAQ,MACRC,QAAS,MACT,uBAAwB,MACxB,iBAAkB,MAClB,gBAAiB,MACjBC,QAAS,MACTC,WAAY,MACZC,QAAS,MACTC,QAAS,MACTC,UAAW,MACXC,QAAS,MACT,oBAAqB,MACrB,iBAAkB,MAClBC,MAAO,MACPC,OAAQ,MACRC,SAAU,OChPCC,EAAc,CACzBC,OAAQ,eACRC,MAAO,eACPC,OAAQ,aACRC,WAAY,mBAGDC,EAAe,CAC1BC,MAAO,QACPC,UAAW,YACXC,KAAM,YACNC,MAAO,aACPC,KAAM,aAGKC,EAAS,CACpBC,EAAG,aACHC,EAAG,UACHC,EAAG,WACHC,EAAG,QACHC,EAAG,QACHC,EAAG,MACHC,EAAG,OACHC,EAAG,OACHC,EAAG,SACHC,EAAG,YACHC,GAAI,UACJC,GAAI,WACJC,GAAI,YAGOC,EAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAElDC,EAAiB,CAAC,KAAM,KAAM,KAAM,MAEpCC,EAAkB,CAAC,YAAa,MAAO,WChCvCC,EAAY,SAACC,EAAaC,GACrC,OACEC,KAAKC,MAAMD,KAAKE,UAAYH,EAAaD,EAAc,IAAMA,GAIpDK,EAAgB,SAACC,GAAD,OAAUA,EAAKC,cAAcC,MAAM,EAAG,KAatDC,EAAgB,SAACC,EAAOC,GAAY,IAAD,cACmBD,EADnB,GACvCE,EADuC,KAC1BC,EAD0B,KACXC,EADW,KACEC,EADF,KAGxCC,EAAc,SAACV,GAAU,IAdRW,EAcO,EACDZ,EAAcC,GACtCY,MAAM,KACNC,KAAI,SAACC,GAAD,OAAYC,SAASD,MAHA,mBACrBvC,EADqB,KACfD,EADe,KACR0C,EADQ,KAItBC,GAlBeN,EAkBUK,IAjBhB,EAAIzB,EAAe,GAAKA,EAAeoB,EAAS,GAoB/D,MAAO,CAFSrB,EAAKU,EAAKkB,UAETF,EAAKC,EADWzC,EAAOF,GAdvCsC,MAAM,IACNC,KAAI,SAACM,EAAQC,GAAT,OAA8B,IAAVA,EAAcD,EAAOE,cAAgBF,KAC7DG,KAAK,IAamC/C,IAVG,EAmB1CmC,EAAYJ,GAnB8B,mBAc5CiB,EAd4C,KAe5CC,EAf4C,KAgB5CC,EAhB4C,KAiB5CC,EAjB4C,KAkB5CC,EAlB4C,OA2B1CjB,EAAYH,GA3B8B,mBAsB5CqB,EAtB4C,KAuB5CC,EAvB4C,KAwB5CC,EAxB4C,KAyB5CC,EAzB4C,KA0B5CC,EA1B4C,OAmC1CtB,EAAYF,GAnC8B,mBA8B5CyB,EA9B4C,KA+B5CC,EA/B4C,KAgC5CC,EAhC4C,KAiC5CC,EAjC4C,KAkC5CC,EAlC4C,OA2C1C3B,EAAYD,GA3C8B,mBAsC5C6B,EAtC4C,KAuC5CC,EAvC4C,KAwC5CC,EAxC4C,KAyC5CC,EAzC4C,KA0C5CC,EA1C4C,KA6C9C,OAAQrC,EAAOsC,eACb,IAAK,QACL,IAAK,YACH,MAAM,WAAN,OACEf,EADF,aACuBC,GADvB,OACsCC,EADtC,mBAEEW,IAAmBV,EAAnB,aAA0CA,GAAmB,GAF/D,8BAIEO,EAJF,aAIuBC,GAJvB,OAIsCC,EAJtC,eAI4DC,EAJ5D,UAOF,IAAK,OACL,IAAK,QACL,IAAK,OACH,MAAM,WAAN,OACEb,EADF,aACuBC,GADvB,OACsCC,EADtC,mBAGEC,IAAmBL,GAAgBM,IAAkBL,EAArD,aACUI,GACN,GALN,mBAOEC,IAAkBL,EAAlB,YAAqCK,GAAkB,GAPzD,gCAWET,EAXF,aAWqBC,GAXrB,OAWkCC,EAXlC,mBAaEC,IAAiBU,GAAgBT,IAAgBU,EAAjD,aACUX,GACN,GAfN,mBAiBEW,IAAgBV,EAAhB,YAAmCA,GAAgB,GAjBrD,gDAsBEW,EAtBF,aAsBuBC,GAtBvB,OAsBsCC,EAtBtC,mBAwBEC,IAAmBL,GAAgBM,IAAkBL,EAArD,aACUI,GACN,GA1BN,mBA4BEC,IAAkBL,EAAlB,YAAqCK,GAAkB,GA5BzD,gCAgCET,EAhCF,aAgCqBC,GAhCrB,OAgCkCC,EAhClC,wBAkCKC,EAlCL,aAkCsBC,EAlCtB,UAqCF,QACE,OAAO,IAIAO,EAAqB,SAACC,GACjC,IAAMC,EAAM,IAAIC,KAShB,OAAOC,OAAOC,QARE,CACd9E,MAAO,CAAC,EAAG,EAAG,EAAG,GACjBC,UAAW,CAAC,EAAG,EAAG,EAAG,GACrBC,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBC,MAAO,CAAC,EAAG,GAAI,EAAG,IAClBC,KAAM,CAAC,EAAG,IAAK,EAAG,OAIjB2E,MAAK,mCAAEC,EAAF,iBAAkBA,IAAQN,KAAO,GACtChC,KAAI,SAACuC,GAAD,OAAY,IAAIL,KAAKD,EAAIO,QAAQP,EAAIQ,UAAYF,QAG7CG,EAAsB,SAACC,EAAMC,EAAMC,GAC9C,IAAIC,EAAkB,EAClBC,EAAkB,EAF4C,cAS9DF,EAT8D,GAKhEG,EALgE,KAMhEC,EANgE,KAOhEC,EAPgE,KAQhEC,EARgE,KAYlEhB,OAAOiB,OAAOT,GAAMU,SAAQ,SAACC,GAC3B,IAAMC,EAAW,SAACpE,GAAD,OACfgD,OAAOqB,KAAKF,GAASG,WAAU,SAACnB,GAAD,OAASA,IAAQpD,EAAcC,OAC1DuE,EAAeH,EAASP,GACxBW,EAAiBJ,EAASN,GAC1BW,EAAeL,EAASL,GACxBW,EAAiBN,EAASJ,GAE1BW,EAAiB,SAACC,EAAYC,GAClC,OAAO7B,OAAOiB,OAAOE,GAClBtD,KAAI,SAACb,GAAD,OAAUA,EAAKyD,MACnBqB,QAAO,SAACC,EAAKC,EAAM5D,GAIlB,OAHIA,GAASwD,GAAcxD,GAASyD,IAClCE,GAAOC,GAEFD,IACN,IAGPnB,GAAmBe,EAAeD,EAAgBD,GAClDd,GAAmBgB,EAAeH,EAAgBD,MAEpD,IAAMU,EACgB,IAApBrB,GACMD,EAAkBC,EAAmB,KAAKsB,QAAQ,GACpD,IACN,MAAO,CAACvB,EAAiBsB,IAGdE,EAAW,SAAC3B,GAOvB,IANA,IAAM4B,GAAc,IAAIrC,MAAOsC,cACzBC,EAAQtC,OAAOiB,OAAOT,GAAM3C,KAChC,SAACsD,GAAD,OAAanB,OAAOqB,KAAKF,GAAS,GAAGvD,MAAM,KAAK,MAG5C2E,EAAW,GACRC,EAFSzE,SAAS,YAAI,IAAI0E,IAAJ,YAAYH,KAASI,OAAO,IAEnCF,GAAKJ,EAAaI,IACxCD,EAASI,KAAKH,GAEhB,OAAOD,EAASG,MAAK,SAACE,EAAGC,GAAJ,OAAUA,EAAID,MAGxBE,EAAc,SAACC,GAE1B,IAAMC,EAAUC,SAASC,cAAT,qBAAqCH,EAArC,MAChB,GAAIC,EAEF,OADcG,OAAOC,iBAAiBJ,GACzBK,iBAAiB,oBAQ9B,MANe,CACbvI,OAAQ,oBACRC,MAAO,oBACPC,OAAQ,oBACRC,WAAY,oBAEA8H,IAMZO,EAAY,SAAC3F,GAAD,OAAaA,EAAS,GAAT,WAAkBA,GAAlB,UAAgCA,IAEzD4F,EAAoB,SAACC,EAAO/C,GAChC,GAAqB,IAAjB+C,EAAMC,OAAc,OAAOD,EAI/B,GAAa,SAAT/C,EAAiB,CAInB,IAJoB,IAAD,EACQ+C,EAAM,GAAG5F,MAAM,KADvB,mBACZrC,EADY,KACND,EADM,KACC0C,EADD,KAIVwE,EAFOzE,SAASC,GAAO,EAEVwE,EAAI,EAAGA,IAC3BgB,EAAME,QAAN,UAAiBnI,EAAjB,YAAyBD,EAAzB,YAAkCgI,EAAUd,KAE9C,OAAOgB,EAGF,GAAa,WAAT/C,EAAmB,CAU5B,IATA,IAAMkD,EAAYH,EAAM,GAClBI,EAAWJ,EAAMA,EAAMC,OAAS,GAFV,EAIIE,EAAU/F,MAAM,KAJpB,mBAIrBiG,EAJqB,KAIVC,EAJU,OAKEF,EAAShG,MAAM,KALjB,mBAKrBmG,EALqB,KAKXC,EALW,KAMtBC,EAAYlG,SAAS+F,GAAc,EACnCI,EAAYnG,SAASiG,GAAa,EAG/BxB,EAAIyB,EAAWzB,EAAI,EAAGA,IAC7BgB,EAAME,QAAN,UAAiBG,EAAjB,YAA8BP,EAAUd,KAI1C,IAAK,IAAIA,EAAI0B,EAAW1B,GAAK,GAAIA,IAC/BgB,EAAMb,KAAN,UAAcoB,EAAd,YAA0BT,EAAUd,KAEtC,OAAOgB,IAILW,EAAa,SAACX,EAAOY,GAKzB,IAAMC,EAAiBb,EAAM3F,KAAI,0CAC3ByG,EAAW,YAAO,IAAI7B,IAAI4B,IAC1BE,EAAmBD,EAAYzG,KAAI,SAACb,GAAD,OACvCA,EAAKY,MAAM,KAAKV,MAAM,EAAG,GAAGoB,KAAK,QAE7BkG,EAAa,YAAO,IAAI/B,IAAI8B,IAC5BE,EAAalB,EAAkBe,EAAa,QAC5CI,EAAenB,EAAkBiB,EAAe,UACtD,OAAOJ,EAAWM,EAAeD,GAGtBE,EAAa,SAACnE,EAAMoE,EAAOtJ,EAAOC,GAC7C,IAAMsJ,EAAU,GACVC,EAAkB,GAF8B,EAzD/BhC,EA4DI8B,GA5DYG,MAAM,QAyDS,mBAG/CC,EAH+C,KAG5CC,EAH4C,KAGzCpC,EAHyC,KAIhDqC,EAAWnH,SAASzC,GACpB6J,EAAUpH,SAASxC,GAEzByE,OAAOC,QAAQO,GAAMU,SAAQ,YAA4B,IAAD,mBAAzBkE,EAAyB,KAAZnE,EAAY,KACtD6D,EAAgBM,GAAepF,OAAOC,QAAQgB,GAC3CoE,QAAO,YAAa,IAAD,sBACEzH,MAAM,KAAKC,KAAI,SAACyH,GAAD,OAAUvH,SAASuH,MADpC,mBACXC,EADW,KACRC,EADQ,KAElB,OAAoB,IAAbN,GAAiCM,IAAMN,IAAtBK,IAAMJ,KAE/BtH,KAAI,oDAA2B+G,MAC/B9C,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,MAGvC,IAAMyD,EAAczF,OAAOiB,OAAO6D,GAC5BY,EAAW9I,KAAK+I,IAAL,MAAA/I,KAAI,YAAQ6I,IACvBG,EAAoBH,EAAY3D,QAAO,SAACc,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAoB9D,OAlBA7C,OAAOqB,KAAKb,GAAMU,SAAQ,SAACkE,GACzB,IAAMS,EAAcC,EAAaV,GACjC,GAAIS,EAAa,CACf,IAAME,EAAejB,EAAgBM,GAC/BY,EAAkBD,EAAeH,EAAqB,IAEtDK,EAAWF,EAAeL,EAAhB,GADG,GAGfK,IACFlB,EAAQgB,GAAe,CACrBK,UAAU,QAAD,OAAUlB,EAAV,YAAeC,EAAf,YAAoBpC,EAApB,YAAyBoD,EAAzB,KACTF,eACAC,iBACApB,cAKDC,GAGIsB,EAAc,SAAC3F,EAAMoE,EAAOtJ,EAAOC,GAA+B,IAAzB6K,EAAwB,wDACtElB,EAAWnH,SAASzC,GACpB6J,EAAUpH,SAASxC,GACnB8K,EAAY,GAElBrG,OAAOiB,OAAOT,GAAMU,SAAQ,SAACoF,GAC3BD,EAAU1D,KAAV,MAAA0D,EAAS,YAASrG,OAAOC,QAAQqG,QAOnC,IAAMC,EAAoBF,EACvBhB,QAAO,YAAa,IAAD,sBACEzH,MAAM,KAAKC,KAAI,SAACyH,GAAD,OAAUvH,SAASuH,MADpC,mBACXC,EADW,KACRC,EADQ,KAGlB,OAAIY,EACKb,EAAIJ,GAAYI,IAAMJ,GAAWK,EAAIN,GAExB,IAAbA,GAAiCM,IAAMN,IAAtBK,IAAMJ,KAGjCzC,MAAK,cAAuB,IAArB8D,EAAoB,oBAAXC,EAAW,oBACpBC,EAAS,SAAC1J,GAAD,OAAUe,SAASf,EAAKY,MAAM,KAAKU,KAAK,MACvD,OAAOoI,EAAOF,GAASE,EAAOD,MAO5BrC,EAAwB,IAAbc,EACXyB,EAAcxC,EAAWoC,EAAmBnC,GAE5CwC,EAAWD,EAAY9I,KAAI,SAACgJ,EAAYzI,GAC5C,IAAM0I,EAAQP,EACXlB,QAAO,uCAAiB0B,SAASF,MACjChJ,KAAI,oDAA2B+G,MAC/B9C,QAAO,SAACc,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAE3B,OAAO,aACLE,GAAG,GAAD,OAAK3E,EAAQ,EAAb,YAAkB5C,EAAOF,KAC1BsJ,EAAQkC,MAGb,OAAOF,GAGII,EAAiB,SAACxG,EAAMlF,EAAOC,GAC1C,IAmBM0L,EAAW,SAACrC,EAAOwB,GAEvB,OADaD,EAAY3F,EAAMoE,EAAOtJ,EAAOC,EAAM6K,GACvCvI,KAAI,SAACyH,GAAD,OAAUA,EAAKV,MAAQ9C,QAAO,SAACc,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,IAGjE,OAxBuB,WACrB,IAAMW,EAAQ,GACd,IAAK,IAAIoB,KAAS/J,EAAa,CAAC,IAAD,EACvBqM,EAAcD,EAASrC,GAAO,GAC9BuC,EAAeF,EAASrC,GAAO,GAC/BwC,EAAWF,EAAcC,EACzBE,EAA6B,IAAbD,EAAiB,EAAKF,EAAcE,EAAY,IAChEE,EACS,IAAbF,EAAiB,EAAKD,EAAeC,EAAY,IAEnD5D,EAAME,SAAN,GACEX,GAAI6B,GADN,wBAEMA,EAFN,UAEsByC,GAFtB,wBAGMzC,EAHN,WAGuB0C,GAHvB,IAMF,OAAO9D,EAQF+D,IC3XIC,EAAU,SAACC,GACtB,IAAMjH,EAAO,GA4Bb,OA1BAiH,EAAKvG,SAAQ,SAACwG,GAAU,IAEpBvG,EAEEuG,EAFFvG,QAFmB,cAIjBuG,EADFC,UAHmB,GAGPpM,EAHO,KAGDD,EAHC,KAGM0C,EAHN,KAMfhB,EAAO,IAAI+C,KAAKxE,EAAMD,EAAQ,EAAG0C,GACjC4J,EAAa,IAAI7H,KACnB8G,EAAa9J,EAAcC,GACzB6K,EAAmB9K,EAAc6K,GAKvC,IAHApH,EAAKW,GAAW,GAGT0F,IAAegB,GACpB7K,EAAKqD,QAAQrD,EAAKsD,UAAY,GAC9BuG,EAAa9J,EAAcC,GAC3BwD,EAAKW,GAAS0F,GAAc,GAE5BrG,EAAKW,GAAS0F,GAAY/L,OAAS2B,EAAU,EAAG,KAChD+D,EAAKW,GAAS0F,GAAY9L,MAAQ0B,EAAU,EAAG,IAC/C+D,EAAKW,GAAS0F,GAAY7L,OAASyB,EAAU,EAAG,IAChD+D,EAAKW,GAAS0F,GAAY5L,WAAawB,EAAU,EAAG,MAIjD+D,GC/BM,GACb,CACEW,QAAS,SACTwG,UAAW,CAAC,KAAM,GAAI,IAExB,CACExG,QAAS,gBACTwG,UAAW,CAAC,KAAM,EAAG,M,kBCWVG,G,OAZF,SAACC,GAAW,IAAD,EACfhF,EAAuBgF,EAAvBhF,GAAItC,EAAmBsH,EAAnBtH,KAAMuH,EAAaD,EAAbC,UACXC,EAAYC,IAAW,OAAD,gBAAkBnF,IAAlB,mCAChBtC,GAASA,GADO,cAE1B,gBAAiBuH,GAFS,IAI5B,OACE,yBAAKG,UAAWF,EAAWG,QAAQ,eACjC,yBAAKC,KAAI,UAAKC,IAAL,YAAcvF,QCiEdwF,G,yDAzEb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IAORS,kBAAoB,WAClB,EAAKC,eATY,EAYnBC,mBAAqB,WAEd,EAAKC,aACR,EAAKC,SAAS,CAACC,cAAe,IAC9B,EAAKJ,gBAhBU,EAoBnBK,qBAAuB,WACrBC,cAAc,EAAKJ,YACnB,EAAKA,WAAa,MAtBD,EAyBnBF,YAAc,WACZ,EAAKE,WAAaK,aAAY,WAAO,IAC5BH,EAAiB,EAAKI,MAAtBJ,cACA/B,EAAS,EAAKiB,MAAdjB,MAGDoC,EAAYtM,KAAKuM,KAAKrC,EAAQ,IAEhClK,KAAKwM,IAAIP,IAAkBjM,KAAKwM,IAAItC,GACtC,EAAK8B,UAAS,SAACS,GAAD,MAAgB,CAC5BR,cAAeQ,EAAUR,cAAgBK,OAG3C,EAAKN,SAAS,CAACC,cAAe/B,IAC9BiC,cAAc,EAAKJ,YACnB,EAAKA,WAAa,QAEnB,KAxCH,EAAKA,WAAa,KAClB,EAAKM,MAAQ,CACXJ,cAAe,GAJA,E,qDA6CT,IAAD,EAC2BS,KAAKvB,MAAhChF,EADA,EACAA,GAAIwG,EADJ,EACIA,QAAStH,EADb,EACaA,WACb4G,EAAiBS,KAAKL,MAAtBJ,cACDW,EAAkBtB,IAAW,wBAAyB,CAC1D,kCAAmCjG,GAAc,IACjD,kCAAmCA,EAAa,MAE5CwH,EAA8B,IAAfxH,EAAA,UAAsBA,EAAtB,KAAsC,SACrDyH,EAAgBzH,EAAa,IAEnC,OACE,6BAASkG,UAAS,+BAA0BpF,IAE1C,4BAAQoF,UAAU,qBAChB,wBAAIA,UAAU,sBAAsBoB,GACpC,kBAAC,EAAD,CAAMxG,GAAIA,EAAItC,KAAK,iBAIrB,uBAAG0H,UAAU,oBAAoBU,GACjC,yBAAKV,UAAWqB,GACd,kBAAC,EAAD,CAAMzG,GAAG,YAAYiF,UAAW0B,IAChC,8BAAOD,S,GApEOE,cCiBTC,G,OAlBK,SAAC7B,GAAW,IACvBhF,EAAwCgF,EAAxChF,GAAIwG,EAAoCxB,EAApCwB,QAASM,EAA2B9B,EAA3B8B,YAAaC,EAAc/B,EAAd+B,WAC3BC,EAASF,EAAc,WAAa,WAE1C,OACE,6BAAS1B,UAAS,mCAA8BpF,IAC9C,4BAAQoF,UAAU,uBAChB,wBAAIA,UAAU,wBAAwBoB,GACtC,4BACEpB,UAAU,sBACV6B,QAAS,kBAAMF,EAAW/G,KAC1B,kBAAC,EAAD,CAAMA,GAAIgH,MAGbhC,EAAMkC,YC2EEC,G,yDAvFb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAORS,kBAAoB,WAClBvF,SAASkH,iBAAiB,YAAa,EAAKC,kBAAkB,IAT7C,EAYnBtB,qBAAuB,WACrB7F,SAASoH,oBAAoB,YAAa,EAAKD,kBAAkB,IAbhD,EAgBnBA,iBAAmB,SAACE,GACd,EAAKrB,MAAMsB,SAAW,EAAKC,SAASC,QAAQC,SAASJ,EAAEK,SACzD,EAAKC,kBAlBU,EAsBnBA,eAAiB,WACf,EAAKhC,UAAS,SAACS,GAAD,MAAgB,CAC5BkB,QAASlB,EAAUkB,YAxBJ,EA4BnBM,WAAa,SAACnD,GAAU,IAAD,EACO,EAAKK,MAA1BtH,EADc,EACdA,KAAMqK,EADQ,EACRA,YACb,EAAKF,iBACI,WAATnK,EAAoBqK,EAAYpD,GAAQoD,EAAYrK,EAAMiH,IA/BzC,EAkCnBqD,WAAa,WAAO,IAAD,EACQ,EAAKhD,MAAvBtH,EADU,EACVA,KAAMuK,EADI,EACJA,SACPC,EAAgBC,MAAMC,QAAQH,GAC9BI,EAAYH,EAAgBD,EAAWhL,OAAOqB,KAAK2J,GACnDK,EAAW,0FAGK5K,EAHL,UAMjB,OACE,wBAAI0H,UAAU,kBACXiD,EAAUvN,KAAI,SAAC6J,GACd,IAAM4D,EAAQL,EAAgBvD,EAAOsD,EAAStD,GAE9C,OACE,wBAAIvH,IAAKuH,EAAMS,UAAU,kBACvB,4BACEA,UAAWkD,EACXrB,QAAS,kBAAM,EAAKa,WAAWnD,KAC9B4D,SApDb,EAAKd,SAAWe,IAAMC,YACtB,EAAKvC,MAAQ,CACXsB,QAAQ,GAJO,E,qDA+DT,IACDA,EAAUjB,KAAKL,MAAfsB,OADA,EAE6BjB,KAAKvB,MAAlCtH,EAFA,EAEAA,KAAMgL,EAFN,EAEMA,UAAWT,EAFjB,EAEiBA,SAClBM,EAAQJ,MAAMC,QAAQH,GAAYS,EAAYT,EAASS,GAEvDJ,EAAcnD,IAClB,mBAD4B,4BAEPzH,GACrB,CACE,2BAA4B8J,IAIhC,OACE,yBAAKpC,UAAS,6BAAwB1H,GAAQiL,IAAKpC,KAAKkB,UACtD,4BAAQrC,UAAWkD,EAAarB,QAASV,KAAKsB,gBAC5C,0BAAMzC,UAAU,mBAAmBmD,GACnC,kBAAC,EAAD,CAAMvI,GAAG,WAAWiF,UAAWuC,KAEhCA,GAAUjB,KAAKyB,kB,GAnFDpB,cCQRgC,G,OATA,SAAC5D,GAAW,IAClBhF,EAAegF,EAAfhF,GAAIiH,EAAWjC,EAAXiC,QACX,OACE,4BAAQ7B,UAAS,yBAAoBpF,GAAMiH,QAASA,GAClD,0BAAM7B,UAAU,gBAAgBpF,GAChC,kBAAC,EAAD,CAAMA,GAAIA,EAAItC,KAAK,mB,SCuHVmL,G,OA3HG,SAAC7D,GAAW,IAE1BvH,EAUEuH,EAVFvH,KACAa,EASE0G,EATF1G,KACAZ,EAQEsH,EARFtH,KACAoL,EAOE9D,EAPF8D,OACAC,EAME/D,EANF+D,OANyB,EAYvB/D,EALFgE,iBAPyB,MAOb,KAPa,IAYvBhE,EAJFiE,kBARyB,MAQZ,KARY,EASzBC,EAGElE,EAHFkE,OATyB,EAYvBlE,EAFFmE,mBAVyB,WAYvBnE,EADFoE,mBAXyB,SAuDrBC,EAAQ,CAACC,KAAM,QAASC,UAAW,CAAC,CAAC,SAAU,SAiCrD,OACE,yBAAKnE,UAAU,aACb,kBAAC,IAAD,CACE3H,KAAMA,EACNa,KAAMA,EACNkL,QAAQ,KACRT,OAAQA,EACRU,QAAS,GACTX,OAAQA,EAERI,OAAQ,SAACzL,GAAD,OAAUyL,EAAOzL,EAAKuC,KAC9B0J,QAAQ,KACRC,YAAaN,EACbO,QAAS,KACTZ,UAAWA,EACXC,WAAYA,EACZY,SAxDW,CACfC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,WAAY,GAqDRC,aAAa,EACbf,YAAaA,EACbC,YAAaA,EACbe,YAAa,CAAC,GAAI,GAAI,GAAI,IAC1BC,YAAa,EACbC,eAAgB,GAChBC,gBAAiB,GACjBC,eAAgBlB,EAChBmB,QAAS,GACTC,QAzDU,SAACC,GAAiB,IACzB1K,EAAyB0K,EAAzB1K,GAAI+D,EAAqB2G,EAArB3G,MAAO4G,EAAcD,EAAdC,WACZC,EACK,cAATlN,GAAwBiN,EAAW3G,SAAS,OACxCvL,EAAOuC,SAAS2P,IAChB,KAEAnE,EACK,cAAT9I,EAAA,UACO5F,EAAYkI,GADnB,aAC2B+D,GAD3B,OAC0C,WAAP/D,EAAkB,KAAO,IAD5D,UAEO2K,EAFP,aAEsB5G,EAAM5E,QAAQ,GAFpC,KAII0L,EACK,cAATnN,EACIkN,GAAS,gBAEED,GAHf,UAKM3K,EAAGgE,SAAS,UACR,wBACA,yBAGZ,OACE,yBAAKoB,UAAU,WACb,wBAAIA,UAAU,oBAAoBoB,GAClC,uBAAGpB,UAAU,iBAAiByF,KAgC9BC,MArGQ,CACZC,KAAM,CACJC,UAAW,OACXC,cAAe,YACfC,UAAW,OACXC,MAAO,CACLC,KAAM,CACJC,OAAQ,OAEVR,KAAM,CACJS,KAAM,OACNC,WAAY,OACZC,WAAY,SACZC,SAAU,OACVR,cAAe,eAIrBS,KAAM,CACJN,KAAM,CACJC,OAAQ,OACRM,YAAa,EACbC,gBAAiB,QAGrBnB,QAAS,CACPoB,UAAW,CACTpC,QAAS,YACTqC,aAAc,MACdC,UAAW,+BAyEXC,SAAS,EACTC,gBAAiB,GACjBC,cAAe,Q,mCCPRC,G,yDA7Gb,WAAYnH,GAAQ,IAAD,8BACjB,cAAMA,IAIRoH,OAAS,WACH,EAAKtR,KACP,EAAKA,IAAIsR,UAPM,EA6BnBC,MAAQ,WAEN,IADA,IAAMR,EAAY,EAAKA,UAAUnE,QACjC,MAAoBS,MAAMmB,KAAKuC,EAAUS,YAAzC,eAAsD,CAAjD,IAAMC,EAAK,KACdV,EAAUW,YAAYD,KAhCP,EAoCnBE,QAAU,WAAO,IACRhP,EAAQ,EAAKuH,MAAbvH,KAED3C,EAAM,IAAI4R,IACdzP,OAAO0P,OACL,GADF1P,OAAA,IAAAA,CAAA,GAGO,EAAK+H,OAEV,CACE4H,QAAS,EAAKf,UAAUnE,QACxBmF,WAAY,WACZC,YAAY,EACZC,MAAO,CACLC,YAAa,QAEfvP,OACAwP,gBAAiB,CACfC,YAAa,GACbC,cAAe,EACfxD,YAAa,OAEbyD,mBAAoB,SAAUC,GAC5B,OAAOA,EAAG,WAAiB,QAE7BC,qBAAsB,SAAUD,GAC9B,OAAOA,EAAIxL,MAAQ,OAAS,QAE9B0L,qBAAsB,EAGtBC,cAAe,SAAUH,EAAK5P,GAAO,IAC5BwF,EAAyBxF,EAAzBwF,eAAgBpB,EAASpE,EAAToE,MACvB,GAAKpE,EACL,MAAM,qGAAN,OAEmC4P,EAAII,WAAWC,KAFlD,6DAG+B7L,EAH/B,aAGyCpE,EAAKuF,aAH9C,mEAIsCC,EAAe9D,QAC/C,GALN,+DAWJwO,KAAM,SAAUC,GACdA,EAAQC,IAAIC,KACVC,IAAGC,SAASC,OAAOC,YAAY,CAAC,EAAG,KAAKC,GAAG,QAE7C,WACEP,EAAQC,IACLO,UAAU,KACVC,KACC,YACA,aACEN,IAAGO,MAAMC,UACT,UACAR,IAAGO,MAAME,MACT,aAOhB,EAAK1T,IAAMA,EACX,EAAK+Q,UAAUnE,QAAQ+G,MAAMC,cAAgB,GApG7C,EAAK7C,UAAYrD,IAAMC,YAFN,E,gEAYjBlC,KAAKkG,UACLrM,OAAOgH,iBAAiB,SAAUb,KAAK6F,U,kDAIvC7F,KAAK8F,U,2CAIL9F,KAAKkG,Y,6CAILlG,KAAK8F,QACLjM,OAAOkH,oBAAoB,SAAUf,KAAK6F,U,+BAgF1C,OAAO,yBAAKzD,IAAKpC,KAAKsF,UAAWzG,UAAU,Y,GA3G7BwB,cCkVH+H,G,yDAzUb,WAAY3J,GAAQ,IAAD,8BACjB,cAAMA,IA4BRS,kBAAoB,WAAO,IAAD,EAMpB,EAAKS,MAJPzI,EAFsB,EAEtBA,KACQnD,EAHc,EAGtBsU,MAAQtU,OACRuU,EAJsB,EAItBA,UAJsB,IAKtBA,UAAYhN,EALU,EAKVA,MAAOtJ,EALG,EAKHA,MAAOC,EALJ,EAKIA,KAET4K,EAA4C0L,EAA/B7K,EAA+B6K,EAAf/O,EAAe+O,EACxDhX,EAAeiX,EAChBjN,EAFyDgN,EAEpCrR,EAAMoE,EAAOtJ,EAAOC,GACzCqL,EAAWT,EAAY3F,EAAMoE,EAAOtJ,EAAOC,GAC3CwW,EAAc/K,EAAexG,EAAMlF,EAAOC,GAC1C0Q,EAAS,GACfjM,OAAOqB,KAAKxG,GAAaqG,SACvB,SAAC0D,GAAD,OAAYqH,EAAOrH,GAAS9B,EAAY8B,MAG1C,EAAKoN,YAAY3U,GACjB,EAAKuL,SAAS,CACZqJ,WAAYJ,EAAsBrR,GAClCoR,UAAU,eACLA,EADI,CAEP/M,UACA+B,WACAmL,gBAEF9F,SACAiG,WAAW,KAxDI,EA4DnBF,YAAc,SAAC3U,GAAY,IAClBmD,EAAQ,EAAKyI,MAAbzI,KAELD,EAGEsR,EADF1U,EACE0U,EACGhX,EAAeiX,EAChBpR,EAFFmR,EAEuCxU,GAE3C2C,OAAOqB,KAAKxG,GAAaqG,SAAQ,SAAC0D,GAChC,IAAMuN,EAAc5R,EAAoBC,EAAMoE,EAAOlE,GADX,cAEJyR,EAFI,GAEnCxR,EAFmC,KAElBsB,EAFkB,KAI1C,EAAK2G,SAAL,eACGhE,EAAQ,CACPkC,MAAOnG,EACPsB,mBAKN,IAEM0P,EAAQ,CACZtU,SACA+U,WAJiBjV,EAAcuD,EAAiBrD,IAMlD,EAAKuL,SAAS,CAAC+I,WAxFE,EA2FnBU,gBAAkB,SAAC5R,EAAMsC,GAAQ,IAAD,IACJ,EAAKkG,MAAxBzI,EADuB,EACvBA,KAAMoR,EADiB,EACjBA,UADiB,EAEH,EAAK3I,MAAM2I,UAAjChN,EAFyB,EAEzBA,MAAOtJ,EAFkB,EAElBA,MAAOC,EAFW,EAEXA,KACA4K,EAA4C0L,EAA/B7K,EAA+B6K,EAAf/O,EAAe+O,EAKzDhN,EALyDgN,EAKpCrR,EAH3BoE,EAAiB,UAATnE,EAAmBsC,EAAK6B,EAChCtJ,EAAiB,UAATmF,EAAmBsC,EAAKzH,EAChCC,EAAgB,SAATkF,EAAkBsC,EAAKxH,GAExBqL,EAAWT,EAAY3F,EAAMoE,EAAOtJ,EAAOC,GAC3CwW,EACK,UAATtR,GAA6B,SAATA,EAChBuG,EAAexG,EAAMlF,EAAOC,GAC5BqW,EAAUG,YACVO,EACK,UAAT7R,EAAmBqC,EAAYC,GAAM,EAAKkG,MAAMqJ,YAElD,EAAK1J,SAAS,CACZgJ,UAAU,eACLA,GADI,mBAENnR,EAAOsC,GAFD,wBAGP8B,GAHO,yBAIP+B,GAJO,4BAKPmL,GALO,IAOTO,iBApHe,EAwHnBC,gBAAkB,SAAC9R,GAAU,IAAD,EAItB,EAAKwI,MAJiB,IAExB2I,UAAYhN,EAFY,EAEZA,MAAOC,EAFK,EAELA,QAAS+B,EAFJ,EAEIA,SAAUmL,EAFd,EAEcA,YACtC9F,EAHwB,EAGxBA,OAGF,OAAQxL,GACN,IAAK,YACH,OACE,kBAAC,EAAD,CACED,KAAMoG,EACNvF,KAAM,CAACuD,GACPnE,KAAK,YACLoL,OAAO,WACPC,OAAQ,CAAC0G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAC/C1G,OAAQ,SAAClJ,GAAD,OAAQkJ,EAAOlJ,IACvBoJ,aAAa,IAInB,IAAK,MACH,OAAO,kBAAC,EAAD,CAAK3L,KAAMqE,IAEpB,IAAK,UACH,OACE,kBAAC,EAAD,CACErE,KAAMuR,EACN1Q,KAAM,CACJ,eACA,gBACA,cACA,eACA,eACA,gBACA,mBACA,qBAEFZ,KAAK,UACLoL,OAAO,aACPC,OAAQ,CAAC0G,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAC/C1G,OAAQ,SAAClJ,GAEP,OADkBA,EAAGgE,SAAS,WACXkF,EAAOlJ,EAAG6P,QAAQ,UAAW,KAAO,QAEzD1G,aAAa,EACbF,WAAY,CACVa,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,WAAY,CAAC,GAAI,GAAI,GAAI,OAKjC,QACE,OAAO,IA/KM,EAmLnB6F,eAAiB,SAAC9P,GAChB,EAAK6F,UAAS,SAACS,GAAD,MAAgB,CAC5ByJ,eAAgBzJ,EAAUyJ,iBAAmB/P,EAAK,KAAOA,OArL1C,EAyLnBgQ,aAAe,SAACvS,EAAMwS,EAAUvS,GAC9B,IAAMwS,EAAO,IAAIC,KAAK,CAAC1S,GAAO,CAACC,KAAMA,IACrC,GAAI0C,OAAOgQ,UAAUC,iBAEnBjQ,OAAOgQ,UAAUC,iBAAiBH,EAAMD,OACrC,CAEH,IAAMpQ,EAAIK,SAASoQ,cAAc,KAC/BC,EAAMC,IAAIC,gBAAgBP,GAC5BrQ,EAAEyF,KAAOiL,EACT1Q,EAAE6Q,SAAWT,EACb/P,SAASyQ,KAAKC,YAAY/Q,GAC1BA,EAAEgR,QACFC,YAAW,WACT5Q,SAASyQ,KAAKnE,YAAY3M,GAC1BO,OAAOoQ,IAAIO,gBAAgBR,KAC1B,KAvML,EAAKtW,KAAO,IAAI+C,KAChB,EAAKkJ,MAAQ,CACXzI,KAAMgH,EAAQuM,GACd7B,WAAW,EACXpX,OAAQ,GACRC,MAAO,GACPC,OAAQ,GACRC,WAAY,GACZ0W,MAAO,CACLtU,OAAQ,OACR+U,WAAY,IAEdR,UAAW,CACThN,MAAO,SACPtJ,MAAO,EAEPC,KAAM,EAAKyB,KAAKqF,cAChBwC,QAAS,GACT+B,SAAU,GACVmL,YAAa,IAEfE,WAAY,GACZhG,OAAQ,GACR6G,eAAgB,MAzBD,E,qDA6MT,IAAD,SAQHxJ,KAAKL,MANPzI,EAFK,EAELA,KAFK,IAGLmR,MAAQtU,EAHH,EAGGA,OAAQ+U,EAHX,EAGWA,WAHX,IAILR,UAAYhN,EAJP,EAIOA,MAAOtJ,EAJd,EAIcA,MAAOC,EAJrB,EAIqBA,KAC1B0W,EALK,EAKLA,WACAa,EANK,EAMLA,eACAZ,EAPK,EAOLA,UAGKrX,EAAsDiX,EAAzC5W,EAAyC4W,EAAnBtV,EAAmBsV,EAEvDkC,EAAiB,CACrBpP,MAAO,CAAC/J,EAAa+J,GACrBtJ,MAAO,CAJoDwW,EAI3CxW,GAChBC,KAAM,CAAC0W,EAAY1W,IAGf0Y,EAAiB/L,IACrB,eACA,0BAF+B,uCAIX4K,EAJW,OAIWA,IAMtCoB,EAAiB9B,EAAaA,EAAWxU,MAAM,OAAO,GAAK,GAC3DuW,EAAgB/B,EAAaA,EAAWxU,MAAM,OAAO,GAAK,GAEhE,OACE,0BAAMuK,UAAU,OACd,wBAAIA,UAAU,gBAAd,eAGA,6BAASA,UAAU,oCAEjB,4BAAQA,UAAU,kCAChB,wBAAIA,UAbgB,sCAapB,UACA,uBAAGA,UAAU,aACX,0BAAMA,UAAU,sBAAsB+L,EAAtC,QACA,0BAAM/L,UAAU,qBAAqBgM,IAEvC,kBAAC,EAAD,CACE1I,UAAWpO,EACXoD,KAAK,SACLuK,SAAU9P,EACV4P,YAAaxB,KAAK0I,eAKrBE,GACClS,OAAOC,QAAQpF,GAAagD,KAAI,YAAuB,IAAD,mBAApB+G,EAAoB,KAAb2E,EAAa,OACxB,EAAKN,MAAMrE,GAAhCkC,EAD6C,EAC7CA,MAAO7E,EADsC,EACtCA,WAEd,OACE,kBAAC,EAAD,CACE9B,IAAKyE,EACL7B,GAAI6B,EACJ2E,QAASA,EACTzC,MAAOA,EACP7E,WAAYA,QAOtB,6BAASkG,UAAW8L,GAElB,4BAAQ9L,UAAU,sCAChB,wBAAIA,UA/CgB,sCA+CpB,aAECnI,OAAOC,QAAQ+T,GAAgBnW,KAAI,YAAyB,IAAD,mBAAtB4C,EAAsB,2BAAfgH,EAAe,KAAT1E,EAAS,KAC1D,OACE,kBAAC,EAAD,CACE5C,IAAK4C,EACL0I,UAAW1I,EACXtC,KAAMA,EACNuK,SAAUvD,EACVqD,YAAa,EAAKuH,sBAOzB7V,EAAgBqB,KAAI,SAACuW,GACpB,IAAMvK,EAAc,EAAKZ,MAAM6J,iBAAmBsB,EAClD,OACE,kBAAC,EAAD,CACEjU,IAAKiU,EACLrR,GAAIqR,EACJ7K,QAAS6K,EACTvK,YAAaA,EACbC,WAAY,EAAK+I,gBAChB,EAAKN,gBAAgB6B,OAM5B,4BAAQjM,UAAU,eAChB,kBAAC,EAAD,CACEpF,GAAG,SACHuI,MAAM,SACNtB,QAAS,kBACP,EAAK+I,aACHsB,KAAKC,UAAU9T,GACf,YACA,iBAIN,kBAAC,EAAD,CAAQuC,GAAG,QAAQuI,MAAM,QAAQtB,QAAS,kBAAM7G,OAAOoR,kB,GAlUjD5K,cCFE6K,QACW,cAA7BrR,OAAOsR,SAASC,UAEe,UAA7BvR,OAAOsR,SAASC,UAEhBvR,OAAOsR,SAASC,SAAS3P,MACvB,2DCZN4P,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5R,SAAS6R,eAAe,SDyHpB,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3535ab5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.d78c54d1.svg\";","export default {\r\n  Afghanistan: \"AFG\",\r\n  Albania: \"ALB\",\r\n  Algeria: \"DZA\",\r\n  \"American Samoa\": \"ASM\",\r\n  Andorra: \"AND\",\r\n  Angola: \"AGO\",\r\n  Anguilla: \"AIA\",\r\n  Antarctica: \"ATA\",\r\n  \"Antigua and Barbuda\": \"ATG\",\r\n  Argentina: \"ARG\",\r\n  Armenia: \"ARM\",\r\n  Aruba: \"ABW\",\r\n  Australia: \"AUS\",\r\n  Austria: \"AUT\",\r\n  Azerbaijan: \"AZE\",\r\n  Bahamas: \"BHS\",\r\n  Bahrain: \"BHR\",\r\n  Bangladesh: \"BGD\",\r\n  Barbados: \"BRB\",\r\n  Belarus: \"BLR\",\r\n  Belgium: \"BEL\",\r\n  Belize: \"BLZ\",\r\n  Benin: \"BEN\",\r\n  Bermuda: \"BMU\",\r\n  Bhutan: \"BTN\",\r\n  Bolivia: \"BOL\",\r\n  \"Bosnia and Herzegovina\": \"BIH\",\r\n  Botswana: \"BWA\",\r\n  Brazil: \"BRA\",\r\n  \"British Indian Ocean Territory\": \"IOT\",\r\n  \"British Virgin Islands\": \"VGB\",\r\n  Brunei: \"BRN\",\r\n  Bulgaria: \"BGR\",\r\n  \"Burkina Faso\": \"BFA\",\r\n  Burundi: \"BDI\",\r\n  Cambodia: \"KHM\",\r\n  Cameroon: \"CMR\",\r\n  Canada: \"CAN\",\r\n  \"Cape Verde\": \"CPV\",\r\n  \"Cayman Islands\": \"CYM\",\r\n  \"Central African Republic\": \"CAF\",\r\n  Chad: \"TCD\",\r\n  Chile: \"CHL\",\r\n  China: \"CHN\",\r\n  \"Christmas Island\": \"CXR\",\r\n  \"Cocos Islands\": \"CCK\",\r\n  Colombia: \"COL\",\r\n  Comoros: \"COM\",\r\n  \"Cook Islands\": \"COK\",\r\n  \"Costa Rica\": \"CRI\",\r\n  Croatia: \"HRV\",\r\n  Cuba: \"CUB\",\r\n  Curacao: \"CUW\",\r\n  Cyprus: \"CYP\",\r\n  \"Czech Republic\": \"CZE\",\r\n  Congo: \"COD\",\r\n  Denmark: \"DNK\",\r\n  Djibouti: \"DJI\",\r\n  Dominica: \"DMA\",\r\n  \"Dominican Republic\": \"DOM\",\r\n  \"East Timor\": \"TLS\",\r\n  Ecuador: \"ECU\",\r\n  Egypt: \"EGY\",\r\n  \"El Salvador\": \"SLV\",\r\n  \"Equatorial Guinea\": \"GNQ\",\r\n  Eritrea: \"ERI\",\r\n  Estonia: \"EST\",\r\n  Ethiopia: \"ETH\",\r\n  \"Falkland Islands\": \"FLK\",\r\n  \"Faroe Islands\": \"FRO\",\r\n  Fiji: \"FJI\",\r\n  Finland: \"FIN\",\r\n  France: \"FRA\",\r\n  \"French Polynesia\": \"PYF\",\r\n  Gabon: \"GAB\",\r\n  Gambia: \"GMB\",\r\n  Georgia: \"GEO\",\r\n  Germany: \"DEU\",\r\n  Ghana: \"GHA\",\r\n  Gibraltar: \"GIB\",\r\n  Greece: \"GRC\",\r\n  Greenland: \"GRL\",\r\n  Grenada: \"GRD\",\r\n  Guam: \"GUM\",\r\n  Guatemala: \"GTM\",\r\n  Guernsey: \"GGY\",\r\n  Guinea: \"GIN\",\r\n  \"Guinea-Bissau\": \"GNB\",\r\n  Guyana: \"GUY\",\r\n  Haiti: \"HTI\",\r\n  Honduras: \"HND\",\r\n  \"Hong Kong\": \"HKG\",\r\n  Hungary: \"HUN\",\r\n  Iceland: \"ISL\",\r\n  India: \"IND\",\r\n  Indonesia: \"IDN\",\r\n  Iran: \"IRN\",\r\n  Iraq: \"IRQ\",\r\n  Ireland: \"IRL\",\r\n  \"Isle of Man\": \"IMN\",\r\n  Israel: \"ISR\",\r\n  Italy: \"ITA\",\r\n  \"Ivory Coast\": \"CIV\",\r\n  Jamaica: \"JAM\",\r\n  Japan: \"JPN\",\r\n  Jersey: \"JEY\",\r\n  Jordan: \"JOR\",\r\n  Kazakhstan: \"KAZ\",\r\n  Kenya: \"KEN\",\r\n  Kiribati: \"KIR\",\r\n  Kosovo: \"XKX\",\r\n  Kuwait: \"KWT\",\r\n  Kyrgyzstan: \"KGZ\",\r\n  Laos: \"LAO\",\r\n  Latvia: \"LVA\",\r\n  Lebanon: \"LBN\",\r\n  Lesotho: \"LSO\",\r\n  Liberia: \"LBR\",\r\n  Libya: \"LBY\",\r\n  Liechtenstein: \"LIE\",\r\n  Lithuania: \"LTU\",\r\n  Luxembourg: \"LUX\",\r\n  Macau: \"MAC\",\r\n  Macedonia: \"MKD\",\r\n  Madagascar: \"MDG\",\r\n  Malawi: \"MWI\",\r\n  Malaysia: \"MYS\",\r\n  Maldives: \"MDV\",\r\n  Mali: \"MLI\",\r\n  Malta: \"MLT\",\r\n  \"Marshall Islands\": \"MHL\",\r\n  Mauritania: \"MRT\",\r\n  Mauritius: \"MUS\",\r\n  Mayotte: \"MYT\",\r\n  Mexico: \"MEX\",\r\n  Micronesia: \"FSM\",\r\n  Moldova: \"MDA\",\r\n  Monaco: \"MCO\",\r\n  Mongolia: \"MNG\",\r\n  Montenegro: \"MNE\",\r\n  Montserrat: \"MSR\",\r\n  Morocco: \"MAR\",\r\n  Mozambique: \"MOZ\",\r\n  Myanmar: \"MMR\",\r\n  Namibia: \"NAM\",\r\n  Nauru: \"NRU\",\r\n  Nepal: \"NPL\",\r\n  Netherlands: \"NLD\",\r\n  \"Netherlands Antilles\": \"ANT\",\r\n  \"New Caledonia\": \"NCL\",\r\n  \"New Zealand\": \"NZL\",\r\n  Nicaragua: \"NIC\",\r\n  Niger: \"NER\",\r\n  Nigeria: \"NGA\",\r\n  Niue: \"NIU\",\r\n  \"North Korea\": \"PRK\",\r\n  \"Northern Mariana Islands\": \"MNP\",\r\n  Norway: \"NOR\",\r\n  Oman: \"OMN\",\r\n  Pakistan: \"PAK\",\r\n  Palau: \"PLW\",\r\n  Palestine: \"PSE\",\r\n  Panama: \"PAN\",\r\n  \"Papua New Guinea\": \"PNG\",\r\n  Paraguay: \"PRY\",\r\n  Peru: \"PER\",\r\n  Philippines: \"PHL\",\r\n  Pitcairn: \"PCN\",\r\n  Poland: \"POL\",\r\n  Portugal: \"PRT\",\r\n  \"Puerto Rico\": \"PRI\",\r\n  Qatar: \"QAT\",\r\n  \"Republic of the Congo\": \"COG\",\r\n  Reunion: \"REU\",\r\n  Romania: \"ROU\",\r\n  Russia: \"RUS\",\r\n  Rwanda: \"RWA\",\r\n  \"Saint Barthelemy\": \"BLM\",\r\n  \"Saint Helena\": \"SHN\",\r\n  \"Saint Kitts and Nevis\": \"KNA\",\r\n  \"Saint Lucia\": \"LCA\",\r\n  \"Saint Martin\": \"MAF\",\r\n  \"Saint Pierre and Miquelon\": \"SPM\",\r\n  \"Saint Vincent and the Grenadines\": \"VCT\",\r\n  Samoa: \"WSM\",\r\n  \"San Marino\": \"SMR\",\r\n  \"Sao Tome and Principe\": \"STP\",\r\n  \"Saudi Arabia\": \"SAU\",\r\n  Senegal: \"SEN\",\r\n  Serbia: \"SRB\",\r\n  Seychelles: \"SYC\",\r\n  \"Sierra Leone\": \"SLE\",\r\n  Singapore: \"SGP\",\r\n  \"Sint Maarten\": \"SXM\",\r\n  Slovakia: \"SVK\",\r\n  Slovenia: \"SVN\",\r\n  \"Solomon Islands\": \"SLB\",\r\n  Somalia: \"SOM\",\r\n  \"South Africa\": \"ZAF\",\r\n  \"South Korea\": \"KOR\",\r\n  \"South Sudan\": \"SSD\",\r\n  Spain: \"ESP\",\r\n  \"Sri Lanka\": \"LKA\",\r\n  Sudan: \"SDN\",\r\n  Suriname: \"SUR\",\r\n  \"Svalbard and Jan Mayen\": \"SJM\",\r\n  Swaziland: \"SWZ\",\r\n  Sweden: \"SWE\",\r\n  Switzerland: \"CHE\",\r\n  Syria: \"SYR\",\r\n  Taiwan: \"TWN\",\r\n  Tajikistan: \"TJK\",\r\n  Tanzania: \"TZA\",\r\n  Thailand: \"THA\",\r\n  Togo: \"TGO\",\r\n  Tokelau: \"TKL\",\r\n  Tonga: \"TON\",\r\n  \"Trinidad and Tobago\": \"TTO\",\r\n  Tunisia: \"TUN\",\r\n  Turkey: \"TUR\",\r\n  Turkmenistan: \"TKM\",\r\n  \"Turks and Caicos Islands\": \"TCA\",\r\n  Tuvalu: \"TUV\",\r\n  \"U.S. Virgin Islands\": \"VIR\",\r\n  Uganda: \"UGA\",\r\n  Ukraine: \"UKR\",\r\n  \"United Arab Emirates\": \"ARE\",\r\n  \"United Kingdom\": \"GBR\",\r\n  \"United States\": \"USA\",\r\n  Uruguay: \"URY\",\r\n  Uzbekistan: \"UZB\",\r\n  Vanuatu: \"VUT\",\r\n  Vatican: \"VAT\",\r\n  Venezuela: \"VEN\",\r\n  Vietnam: \"VNM\",\r\n  \"Wallis and Futuna\": \"WLF\",\r\n  \"Western Sahara\": \"ESH\",\r\n  Yemen: \"YEM\",\r\n  Zambia: \"ZMB\",\r\n  Zimbabwe: \"ZWE\",\r\n};\r\n","export const statsFields = {\r\n  profit: \"Total Profit\",\r\n  users: \"Active users\",\r\n  orders: \"New orders\",\r\n  complaints: \"Open complaints\",\r\n};\r\n\r\nexport const statsPeriods = {\r\n  today: \"Today\",\r\n  yesterday: \"Yesterday\",\r\n  week: \"Last Week\",\r\n  month: \"Last Month\",\r\n  year: \"Last Year\",\r\n};\r\n\r\nexport const months = {\r\n  0: \"all months\",\r\n  1: \"january\",\r\n  2: \"february\",\r\n  3: \"march\",\r\n  4: \"april\",\r\n  5: \"may\",\r\n  6: \"june\",\r\n  7: \"july\",\r\n  8: \"august\",\r\n  9: \"september\",\r\n  10: \"october\",\r\n  11: \"november\",\r\n  12: \"december\",\r\n};\r\n\r\nexport const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\nexport const numberSuffixes = [\"st\", \"nd\", \"rd\", \"th\"];\r\n\r\nexport const analyticsPanels = [\"histogram\", \"map\", \"summary\"];\r\n","import countryCodes from \"./countryCodes\";\r\nimport {statsFields, months, days, numberSuffixes} from \"./dataHelpers\";\r\n\r\nexport const getRandom = (bottomLimit, upperLimit) => {\r\n  return (\r\n    Math.floor(Math.random() * (upperLimit - bottomLimit + 1)) + bottomLimit\r\n  );\r\n};\r\n\r\nexport const getDateString = (date) => date.toISOString().slice(0, 10);\r\n\r\nconst getNumberSuffix = (number) => {\r\n  return number >= 4 ? numberSuffixes[3] : numberSuffixes[number - 1];\r\n};\r\n\r\nconst getCapitalized = (string) =>\r\n  string\r\n    .split(\"\")\r\n    .map((letter, index) => (index === 0 ? letter.toUpperCase() : letter))\r\n    .join(\"\");\r\n\r\n// get date format to use in stat's header info\r\nexport const getTimeRanges = (dates, period) => {\r\n  const [lastEndDate, lastStartDate, prevEndDate, prevStartDate] = dates;\r\n\r\n  const getElements = (date) => {\r\n    const [year, month, day] = getDateString(date)\r\n      .split(\"-\")\r\n      .map((string) => parseInt(string));\r\n    const suffix = getNumberSuffix(day);\r\n    const dayName = days[date.getDay()];\r\n    const monthName = getCapitalized(months[month]);\r\n    return [dayName, day, suffix, monthName, year];\r\n  };\r\n\r\n  const [\r\n    lastEndDayName,\r\n    lastEndDay,\r\n    lastEndSuffix,\r\n    lastEndMonth,\r\n    lastEndYear,\r\n  ] = getElements(lastEndDate);\r\n\r\n  const [\r\n    lastStartDayName,\r\n    lastStartDay,\r\n    lastStartSuffix,\r\n    lastStartMonth,\r\n    lastStartYear,\r\n  ] = getElements(lastStartDate);\r\n\r\n  const [\r\n    prevEndDayName,\r\n    prevEndDay,\r\n    prevEndSuffix,\r\n    prevEndMonth,\r\n    prevEndYear,\r\n  ] = getElements(prevEndDate);\r\n\r\n  const [\r\n    prevStartDayName,\r\n    prevStartDay,\r\n    prevStartSuffix,\r\n    prevStartMonth,\r\n    prevStartYear,\r\n  ] = getElements(prevStartDate);\r\n\r\n  switch (period.toLowerCase()) {\r\n    case \"today\":\r\n    case \"yesterday\":\r\n      return `\r\n      ${lastStartDayName}, ${lastStartDay}${lastStartSuffix}\r\n      ${prevStartMonth !== lastStartMonth ? `of ${lastStartMonth}` : \"\"}\r\n      vs.\r\n      ${prevStartDayName}, ${prevStartDay}${prevStartSuffix} of ${prevStartMonth}\r\n    `;\r\n\r\n    case \"week\":\r\n    case \"month\":\r\n    case \"year\":\r\n      return `\r\n      ${lastStartDayName}, ${lastStartDay}${lastStartSuffix}\r\n      ${\r\n        lastStartMonth !== lastEndMonth || lastStartYear !== lastEndYear\r\n          ? `of ${lastStartMonth}`\r\n          : \"\"\r\n      }\r\n      ${lastStartYear !== lastEndYear ? `, ${lastStartYear}` : \"\"}\r\n\r\n      -\r\n\r\n      ${lastEndDayName}, ${lastEndDay}${lastEndSuffix}\r\n      ${\r\n        lastEndMonth !== prevEndMonth || lastEndYear !== prevEndYear\r\n          ? `of ${lastEndMonth}`\r\n          : \"\"\r\n      }\r\n      ${prevEndYear !== lastEndYear ? `, ${lastEndYear}` : \"\"}\r\n      \r\n\r\n      vs.\r\n      \r\n      ${prevStartDayName}, ${prevStartDay}${prevStartSuffix}\r\n      ${\r\n        prevStartMonth !== prevEndMonth || prevStartYear !== prevEndYear\r\n          ? `of ${prevStartMonth}`\r\n          : \"\"\r\n      }\r\n      ${prevStartYear !== prevEndYear ? `, ${prevStartYear}` : \"\"}\r\n\r\n      -\r\n\r\n      ${prevEndDayName}, ${prevEndDay}${prevEndSuffix}\r\n\r\n      of ${prevEndMonth}, ${prevEndYear}\r\n    `;\r\n\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\nexport const getBreakpointDates = (range) => {\r\n  const now = new Date();\r\n  const offsets = {\r\n    today: [0, 0, 1, 0],\r\n    yesterday: [1, 0, 1, 0],\r\n    week: [1, 6, 1, 6],\r\n    month: [1, 27, 1, 27],\r\n    year: [1, 364, 1, 364],\r\n  };\r\n\r\n  return Object.entries(offsets)\r\n    .find(([key, value]) => key === range)[1]\r\n    .map((offset) => new Date(now.setDate(now.getDate() - offset)));\r\n};\r\n\r\nexport const getTotalInTimeRange = (data, type, breakpointDates) => {\r\n  let lastPeriodTotal = 0;\r\n  let prevPeriodTotal = 0;\r\n\r\n  const [\r\n    lastPeriodEndDate,\r\n    lastPeriodStartDate,\r\n    prevPeriodEndDate,\r\n    prevPeriodStartDate,\r\n  ] = breakpointDates; // date objects\r\n\r\n  /* iterating through all countries */\r\n  Object.values(data).forEach((country) => {\r\n    const getIndex = (date) =>\r\n      Object.keys(country).findIndex((key) => key === getDateString(date));\r\n    const lastEndIndex = getIndex(lastPeriodEndDate);\r\n    const lastStartIndex = getIndex(lastPeriodStartDate);\r\n    const prevEndIndex = getIndex(prevPeriodEndDate);\r\n    const prevStartIndex = getIndex(prevPeriodStartDate);\r\n\r\n    const getPeriodTotal = (startIndex, endIndex) => {\r\n      return Object.values(country)\r\n        .map((date) => date[type])\r\n        .reduce((acc, curr, index) => {\r\n          if (index >= startIndex && index <= endIndex) {\r\n            acc += curr;\r\n          }\r\n          return acc;\r\n        }, 0);\r\n    };\r\n\r\n    prevPeriodTotal += getPeriodTotal(prevStartIndex, prevEndIndex);\r\n    lastPeriodTotal += getPeriodTotal(lastStartIndex, lastEndIndex);\r\n  });\r\n  const percentage =\r\n    prevPeriodTotal !== 0\r\n      ? ((lastPeriodTotal / prevPeriodTotal) * 100).toFixed(1)\r\n      : 100;\r\n  return [lastPeriodTotal, percentage];\r\n};\r\n\r\nexport const getYears = (data) => {\r\n  const currentYear = new Date().getFullYear();\r\n  const years = Object.values(data).map(\r\n    (country) => Object.keys(country)[0].split(\"-\")[0]\r\n  );\r\n  const firstYear = parseInt([...new Set([...years])].sort()[0]);\r\n  const allYears = [];\r\n  for (let i = firstYear; i <= currentYear; i++) {\r\n    allYears.push(i);\r\n  }\r\n  return allYears.sort((a, b) => b - a);\r\n};\r\n\r\nexport const getColorRgb = (id) => {\r\n  // temporary solution\r\n  const svgIcon = document.querySelector(`svg[class*=${id}]`);\r\n  if (svgIcon) {\r\n    const style = window.getComputedStyle(svgIcon);\r\n    return style.getPropertyValue(\"background-color\");\r\n  } else {\r\n    const colors = {\r\n      profit: \"rgb(41, 191, 215)\",\r\n      users: \"rgb(188, 215, 74)\",\r\n      orders: \"rgb(254, 152, 51)\",\r\n      complaints: \"rgb(250, 80, 80)\",\r\n    };\r\n    return colors[id];\r\n  }\r\n};\r\n\r\nconst getColor = (id) => getColorRgb(id).match(/\\d+/g);\r\n\r\nconst get2digit = (number) => (number < 10 ? `0${number}` : `${number}`);\r\n\r\nconst autoCompleteDates = (array, type) => {\r\n  if (array.length === 0) return array;\r\n\r\n  // autocomplete array with the missing date string\r\n  // since a first day of the month\r\n  if (type === \"days\") {\r\n    const [year, month, day] = array[0].split(\"-\");\r\n    const prevDay = parseInt(day) - 1;\r\n\r\n    for (let i = prevDay; i > 0; i--) {\r\n      array.unshift(`${year}-${month}-${get2digit(i)}`);\r\n    }\r\n    return array;\r\n\r\n    // autocomplete array with the missing months in a given year\r\n  } else if (type === \"months\") {\r\n    const firstDate = array[0];\r\n    const lastDate = array[array.length - 1];\r\n\r\n    const [firstYear, firstMonth] = firstDate.split(\"-\");\r\n    const [lastYear, lastMonth] = lastDate.split(\"-\");\r\n    const prevMonth = parseInt(firstMonth) - 1;\r\n    const nextMonth = parseInt(lastMonth) + 1;\r\n\r\n    // autocomplete months before first month in a given year\r\n    for (let i = prevMonth; i > 0; i--) {\r\n      array.unshift(`${firstYear}-${get2digit(i)}`);\r\n    }\r\n\r\n    // autocomplete months after last month in a given year\r\n    for (let i = nextMonth; i <= 12; i++) {\r\n      array.push(`${lastYear}-${get2digit(i)}`);\r\n    }\r\n    return array;\r\n  }\r\n};\r\n\r\nconst getDateIds = (array, isYearly) => {\r\n  // returns array of strings formatted as:\r\n  // yyy-mm-dd when isYearly is false\r\n  // yyy-mm when isYearly is true\r\n\r\n  const allDaysAsDates = array.map(([elem]) => elem);\r\n  const daysAsDates = [...new Set(allDaysAsDates)];\r\n  const allMonthsAsDates = daysAsDates.map((date) =>\r\n    date.split(\"-\").slice(0, 2).join(\"-\")\r\n  );\r\n  const monthsAsDates = [...new Set(allMonthsAsDates)];\r\n  const daysOutput = autoCompleteDates(daysAsDates, \"days\");\r\n  const monthsOutput = autoCompleteDates(monthsAsDates, \"months\");\r\n  return isYearly ? monthsOutput : daysOutput;\r\n};\r\n\r\nexport const getMapData = (data, field, month, year) => {\r\n  const mapData = {};\r\n  const countriesTotals = {};\r\n  const [r, g, b] = getColor(field);\r\n  const monthNum = parseInt(month);\r\n  const yearNum = parseInt(year);\r\n\r\n  Object.entries(data).forEach(([countryName, values]) => {\r\n    countriesTotals[countryName] = Object.entries(values)\r\n      .filter(([date]) => {\r\n        const [y, m] = date.split(\"-\").map((elem) => parseInt(elem));\r\n        return monthNum === 0 ? y === yearNum : m === monthNum && y === yearNum;\r\n      })\r\n      .map(([date, values]) => values[field])\r\n      .reduce((acc, curr) => acc + curr, 0);\r\n  });\r\n\r\n  const totalsArray = Object.values(countriesTotals);\r\n  const maxTotal = Math.max(...totalsArray);\r\n  const allCountriesTotal = totalsArray.reduce((a, b) => a + b, 0);\r\n\r\n  Object.keys(data).forEach((countryName) => {\r\n    const countryCode = countryCodes[countryName];\r\n    if (countryCode) {\r\n      const countryTotal = countriesTotals[countryName];\r\n      const countryPercent = (countryTotal / allCountriesTotal) * 100;\r\n      const minOpacity = 0.1;\r\n      const opacity = (countryTotal / maxTotal) * (1 - minOpacity) + minOpacity;\r\n\r\n      if (countryTotal) {\r\n        mapData[countryCode] = {\r\n          fillColor: `rgba(${r},${g},${b},${opacity})`,\r\n          countryTotal,\r\n          countryPercent,\r\n          field,\r\n        };\r\n      }\r\n    }\r\n  });\r\n  return mapData;\r\n};\r\n\r\nexport const getHistData = (data, field, month, year, isAllBefore = false) => {\r\n  const monthNum = parseInt(month);\r\n  const yearNum = parseInt(year);\r\n  const histArray = [];\r\n\r\n  Object.values(data).forEach((datesObj) => {\r\n    histArray.push(...Object.entries(datesObj));\r\n  });\r\n\r\n  // returns filtered and sorted array of all date-value elements\r\n  // in a given time range (if there's more than one country\r\n  // there will be many duplicates of the same date key)\r\n\r\n  const filteredHistArray = histArray\r\n    .filter(([date]) => {\r\n      const [y, m] = date.split(\"-\").map((elem) => parseInt(elem));\r\n\r\n      if (isAllBefore) {\r\n        return y < yearNum || (y === yearNum && m < monthNum);\r\n      } else {\r\n        return monthNum === 0 ? y === yearNum : m === monthNum && y === yearNum;\r\n      }\r\n    })\r\n    .sort(([dateA], [dateB]) => {\r\n      const getNum = (date) => parseInt(date.split(\"-\").join(\"\"));\r\n      return getNum(dateA) - getNum(dateB);\r\n    });\r\n\r\n  // get array of date strings formatted as:\r\n  // yyy-mm-dd when isYearly is false\r\n  // yyy-mm when isYearly is true\r\n\r\n  const isYearly = monthNum === 0;\r\n  const dateStrings = getDateIds(filteredHistArray, isYearly);\r\n\r\n  const histData = dateStrings.map((dateString, index) => {\r\n    const value = filteredHistArray\r\n      .filter(([date]) => date.includes(dateString))\r\n      .map(([date, values]) => values[field])\r\n      .reduce((a, b) => a + b, 0);\r\n\r\n    return {\r\n      id: `${index + 1} ${months[month]}`,\r\n      [field]: value,\r\n    };\r\n  });\r\n  return histData;\r\n};\r\n\r\nexport const getSummaryData = (data, month, year) => {\r\n  const getFieldTotals = () => {\r\n    const array = [];\r\n    for (let field in statsFields) {\r\n      const beforeTotal = getTotal(field, true);\r\n      const currentTotal = getTotal(field, false);\r\n      const allTotal = beforeTotal + currentTotal;\r\n      const beforePercent = allTotal === 0 ? 0 : (beforeTotal / allTotal) * 100;\r\n      const currentPercent =\r\n        allTotal === 0 ? 0 : (currentTotal / allTotal) * 100;\r\n\r\n      array.unshift({\r\n        id: field,\r\n        [`${field}Before`]: beforePercent,\r\n        [`${field}Current`]: currentPercent,\r\n      });\r\n    }\r\n    return array;\r\n  };\r\n\r\n  const getTotal = (field, isAllBefore) => {\r\n    const temp = getHistData(data, field, month, year, isAllBefore);\r\n    return temp.map((elem) => elem[field]).reduce((a, b) => a + b, 0);\r\n  };\r\n\r\n  return getFieldTotals();\r\n};\r\n","import {getDateString, getRandom} from \"./dataHandlers\";\r\n\r\nexport const getData = (list) => {\r\n  const data = {};\r\n\r\n  list.forEach((item) => {\r\n    const {\r\n      country,\r\n      startDate: [year, month, day],\r\n    } = item;\r\n\r\n    const date = new Date(year, month - 1, day);\r\n    const todaysDate = new Date();\r\n    let dateString = getDateString(date);\r\n    const todaysDateString = getDateString(todaysDate);\r\n\r\n    data[country] = {};\r\n\r\n    // generate data for each consecutive date\r\n    while (dateString !== todaysDateString) {\r\n      date.setDate(date.getDate() + 1);\r\n      dateString = getDateString(date);\r\n      data[country][dateString] = {};\r\n      // temporarily not considering financial loss\r\n      data[country][dateString].profit = getRandom(0, 3000);\r\n      data[country][dateString].users = getRandom(0, 80);\r\n      data[country][dateString].orders = getRandom(0, 50);\r\n      data[country][dateString].complaints = getRandom(0, 5);\r\n    }\r\n  });\r\n\r\n  return data;\r\n};\r\n","export default [\r\n  {\r\n    country: \"Poland\",\r\n    startDate: [2017, 12, 5],\r\n  },\r\n  {\r\n    country: \"United States\",\r\n    startDate: [2018, 5, 24],\r\n  },\r\n];","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport icons from \"../assets/icons.svg\";\r\nimport \"../scss/Icon.scss\";\r\n\r\nconst Icon = (props) => {\r\n  const {id, type, isRotated} = props;\r\n  const iconClass = classNames(\"Icon\", `Icon--${id}`, {\r\n    [`Icon--${type}`]: type,\r\n    \"Icon--rotated\": isRotated\r\n  });\r\n  return (\r\n    <svg className={iconClass} viewBox=\"0 0 100 100\">\r\n      <use href={`${icons}#${id}`}></use>\r\n    </svg>\r\n  );\r\n};\r\nexport default Icon;\r\n","import React, {Component} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Icon from \"./Icon\";\r\nimport \"../scss/TextPanel.scss\";\r\n\r\nclass TextPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.intervalId = null;\r\n    this.state = {\r\n      animatedValue: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.handleValue();\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    \r\n    if (!this.intervalId) {\r\n      this.setState({animatedValue: 0});\r\n      this.handleValue();\r\n    }\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    clearInterval(this.intervalId);\r\n    this.intervalId = null;\r\n  }\r\n\r\n  handleValue = () => {\r\n    this.intervalId = setInterval(() => {\r\n      const {animatedValue} = this.state;\r\n      const {value} = this.props;\r\n      \r\n      // one increment on every 10ms\r\n      const increment = Math.ceil(value / 80);\r\n\r\n      if (Math.abs(animatedValue) <= Math.abs(value)) {\r\n        this.setState((prevState) => ({\r\n          animatedValue: prevState.animatedValue + increment,\r\n        }));\r\n      } else {\r\n        this.setState({animatedValue: value});\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n      }\r\n    }, 10);\r\n  }\r\n\r\n  render() {\r\n    const {id, heading, percentage} = this.props;\r\n    const {animatedValue} = this.state;\r\n    const percentageClass = classNames(\"TextPanel__percentage\", {\r\n      \"TextPanel__percentage--positive\": percentage >= 100,\r\n      \"TextPanel__percentage--negative\": percentage < 100,\r\n    });\r\n    const percentValue = percentage !== 0 ? `${percentage}%` : \"stable\";\r\n    const isIconRotated = percentage > 100;\r\n\r\n    return (\r\n      <section className={`TextPanel TextPanel--${id}`}>\r\n        {/* HEADER BAR */}\r\n        <header className=\"TextPanel__header\">\r\n          <h3 className=\"TextPanel__heading\">{heading}</h3>\r\n          <Icon id={id} type=\"infographic\" />\r\n        </header>\r\n\r\n        {/* VALUES AND INDICATORS */}\r\n        <p className=\"TextPanel__value\">{animatedValue}</p>\r\n        <div className={percentageClass}>\r\n          <Icon id=\"indicator\" isRotated={isIconRotated} />\r\n          <span>{percentValue}</span>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default TextPanel;\r\n","import React from \"react\";\r\nimport Icon from \"./Icon\";\r\nimport \"../scss/VisualPanel.scss\";\r\n\r\nconst VisualPanel = (props) => {\r\n  const {id, heading, isMaximized, onMaximize} = props;\r\n  const iconId = isMaximized ? \"minimize\" : \"maximize\";\r\n\r\n  return (\r\n    <section className={`VisualPanel VisualPanel--${id}`}>\r\n      <header className=\"VisualPanel__header\">\r\n        <h3 className=\"VisualPanel__heading\">{heading}</h3>\r\n        <button\r\n          className=\"VisualPanel__button\"\r\n          onClick={() => onMaximize(id)}>\r\n          <Icon id={iconId} />\r\n        </button>\r\n      </header>\r\n      {props.children}\r\n    </section>\r\n  );\r\n};\r\nexport default VisualPanel;\r\n","import React, {Component} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Icon from \"./Icon\";\r\nimport \"../scss/Dropdown.scss\";\r\n\r\nclass Dropdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.dropdown = React.createRef();\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    document.addEventListener(\"mousedown\", this.exitDropdownMenu, false);\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    document.removeEventListener(\"mousedown\", this.exitDropdownMenu, false);\r\n  };\r\n\r\n  exitDropdownMenu = (e) => {\r\n    if (this.state.isOpen && !this.dropdown.current.contains(e.target)) {\r\n      this.toggleDropdown();\r\n    }\r\n  };\r\n\r\n  toggleDropdown = () => {\r\n    this.setState((prevState) => ({\r\n      isOpen: !prevState.isOpen,\r\n    }));\r\n  };\r\n\r\n  handleMenu = (item) => {\r\n    const {type, onMenuClick} = this.props;\r\n    this.toggleDropdown();\r\n    type === \"period\" ? onMenuClick(item) : onMenuClick(type, item);\r\n  };\r\n\r\n  renderMenu = () => {\r\n    const {type, menuList} = this.props;\r\n    const isListAnArray = Array.isArray(menuList);\r\n    const menuItems = isListAnArray ? menuList : Object.keys(menuList);\r\n    const buttonClass = `\r\n      Dropdown__button\r\n      Dropdown__button--menu\r\n      Dropdown__button--${type}\r\n    `;\r\n\r\n    return (\r\n      <ul className=\"Dropdown__list\">\r\n        {menuItems.map((item) => {\r\n          const label = isListAnArray ? item : menuList[item];\r\n\r\n          return (\r\n            <li key={item} className=\"Dropdown__item\">\r\n              <button\r\n                className={buttonClass}\r\n                onClick={() => this.handleMenu(item)}>\r\n                {label}\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {isOpen} = this.state;\r\n    const {type, currentId, menuList} = this.props;\r\n    const label = Array.isArray(menuList) ? currentId : menuList[currentId];\r\n\r\n    const buttonClass = classNames(\r\n      \"Dropdown__button\",\r\n      `Dropdown__button--${type}`,\r\n      {\r\n        \"Dropdown__button--active\": isOpen,\r\n      }\r\n    );\r\n\r\n    return (\r\n      <div className={`Dropdown Dropdown--${type}`} ref={this.dropdown}>\r\n        <button className={buttonClass} onClick={this.toggleDropdown}>\r\n          <span className=\"Dropdown__label\">{label}</span>\r\n          <Icon id=\"dropdown\" isRotated={isOpen} />\r\n        </button>\r\n        {isOpen && this.renderMenu()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport Icon from \"./Icon\";\r\nimport \"../scss/Button.scss\";\r\n\r\nconst Button = (props) => {\r\n  const {id, onClick} = props;\r\n  return (\r\n    <button className={`Button Button--${id}`} onClick={onClick}>\r\n      <span className=\"Button__text\">{id}</span>\r\n      <Icon id={id} type=\"infographic\" />\r\n    </button>\r\n  );\r\n};\r\nexport default Button;\r\n","import React from \"react\";\r\nimport {statsFields, months} from \"../lib/dataHelpers\";\r\nimport {ResponsiveBar} from \"@nivo/bar\";\r\nimport \"../scss/Histogram.scss\";\r\n\r\nconst Histogram = (props) => {\r\n  const {\r\n    data,\r\n    keys,\r\n    type,\r\n    layout,\r\n    margin,\r\n    axisRight = null,\r\n    axisBottom = null,\r\n    colors,\r\n    enableGridX = false,\r\n    enableGridY = false,\r\n  } = props;\r\n\r\n  const theme = {\r\n    axis: {\r\n      textColor: \"#fff\",\r\n      textTransform: \"uppercase\",\r\n      tickColor: \"#fff\",\r\n      ticks: {\r\n        line: {\r\n          stroke: \"fff\",\r\n        },\r\n        text: {\r\n          fill: \"#555\",\r\n          fontWeight: \"bold\",\r\n          fontFamily: \"Nunito\",\r\n          fontSize: \"11px\",\r\n          textTransform: \"uppercase\",\r\n        },\r\n      },\r\n    },\r\n    grid: {\r\n      line: {\r\n        stroke: \"#fff\",\r\n        strokeWidth: 3,\r\n        strokeDasharray: \"3 3\",\r\n      },\r\n    },\r\n    tooltip: {\r\n      container: {\r\n        padding: \"10px 15px\",\r\n        borderRadius: \"5px\",\r\n        boxShadow: \"0 2px 5px rgba(0,0,0,0.3)\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const axisLeft = {\r\n    tickSize: 5,\r\n    tickPadding: 5,\r\n    tickRotation: 0,\r\n    tickValues: 3,\r\n  };\r\n\r\n  const color = {from: \"color\", modifiers: [[\"darker\", \"1.6\"]]};\r\n\r\n  const tooltip = (tooltipData) => {\r\n    const {id, value, indexValue} = tooltipData;\r\n    const monthName =\r\n      type === \"histogram\" && indexValue.includes(\"all\")\r\n        ? months[parseInt(indexValue)]\r\n        : null;\r\n\r\n    const heading =\r\n      type === \"histogram\"\r\n        ? `${statsFields[id]}: ${value}${id === \"profit\" ? \" $\" : \"\"}`\r\n        : `${indexValue}: ${value.toFixed(1)}%`;\r\n\r\n    const text =\r\n      type === \"histogram\"\r\n        ? monthName\r\n          ? monthName\r\n          : `Date: ${indexValue}`\r\n        : `${\r\n            id.includes(\"Before\")\r\n              ? \"Before current period\"\r\n              : \"During current period\"\r\n          }`;\r\n\r\n    return (\r\n      <div className=\"tooltip\">\r\n        <h4 className=\"tooltip__heading\">{heading}</h4>\r\n        <p className=\"tooltip__text\">{text}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"Histogram\">\r\n      <ResponsiveBar\r\n        data={data}\r\n        keys={keys}\r\n        indexBy=\"id\"\r\n        margin={margin}\r\n        padding={0.6}\r\n        layout={layout}\r\n        //colors={bar => colors[bar.id]}\r\n        colors={(data) => colors(data.id)}\r\n        colorBy=\"id\"\r\n        borderColor={color}\r\n        axisTop={null}\r\n        axisRight={axisRight}\r\n        axisBottom={axisBottom}\r\n        axisLeft={axisLeft}\r\n        enableLabel={false}\r\n        enableGridX={enableGridX}\r\n        enableGridY={enableGridY}\r\n        gridXValues={[20, 40, 60, 80]}\r\n        gridYValues={5}\r\n        labelSkipWidth={12}\r\n        labelSkipHeight={12}\r\n        labelTextColor={color}\r\n        legends={[]}\r\n        tooltip={tooltip}\r\n        theme={theme}\r\n        animate={true}\r\n        motionStiffness={75}\r\n        motionDamping={10}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Histogram;\r\n","import React, {Component} from \"react\";\r\nimport Datamaps from \"datamaps\";\r\nimport d3 from \"d3\";\r\nimport \"../scss/Histogram.scss\";\r\nimport \"../scss/Map.scss\";\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.container = React.createRef();\r\n  }\r\n\r\n  resize = () => {\r\n    if (this.map) {\r\n      this.map.resize();\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.drawMap();\r\n    window.addEventListener(\"resize\", this.resize);\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    this.clear();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.drawMap();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.clear();\r\n    window.removeEventListener(\"resize\", this.resize);\r\n  }\r\n\r\n  clear = () => {\r\n    const container = this.container.current;\r\n    for (const child of Array.from(container.childNodes)) {\r\n      container.removeChild(child);\r\n    }\r\n  };\r\n\r\n  drawMap = () => {\r\n    const {data} = this.props;\r\n\r\n    const map = new Datamaps(\r\n      Object.assign(\r\n        {},\r\n        {\r\n          ...this.props,\r\n        },\r\n        {\r\n          element: this.container.current,\r\n          projection: \"mercator\",\r\n          responsive: true,\r\n          fills: {\r\n            defaultFill: \"#fff\",\r\n          },\r\n          data,\r\n          geographyConfig: {\r\n            borderWidth: 0.5,\r\n            borderOpacity: 1,\r\n            borderColor: \"#fff\",\r\n            // don't change color on mouse hover\r\n            highlightFillColor: function (geo) {\r\n              return geo[\"fillColor\"] || \"#fff\";\r\n            },\r\n            highlightBorderColor: function (geo) {\r\n              return geo.field ? \"#555\" : \"#fff\";\r\n            },\r\n            highlightBorderWidth: 1,\r\n\r\n            // show desired information in tooltip\r\n            popupTemplate: function (geo, data) {\r\n              const {countryPercent, field} = data;\r\n              if (!data) return;\r\n              return `\r\n                <div class=\"hoverinfo tooltip\">\r\n                  <h4 class=\"tooltip__heading\">${geo.properties.name}</h4>\r\n                  <p class=\"tooltip__text\">${field}: ${data.countryTotal}</p>\r\n                  <p class=\"tooltip__text\">Share: ${countryPercent.toFixed(\r\n                    1\r\n                  )}%</p>\r\n                </div>            \r\n              `;\r\n            },\r\n          },\r\n          done: function (datamap) {\r\n            datamap.svg.call(\r\n              d3.behavior.zoom().scaleExtent([1, 10]).on(\"zoom\", redraw)\r\n            );\r\n            function redraw() {\r\n              datamap.svg\r\n                .selectAll(\"g\")\r\n                .attr(\r\n                  \"transform\",\r\n                  \"translate(\" +\r\n                    d3.event.translate +\r\n                    \")scale(\" +\r\n                    d3.event.scale +\r\n                    \")\"\r\n                );\r\n            }\r\n          },\r\n        }\r\n      )\r\n    );\r\n    this.map = map;\r\n    this.container.current.style.paddingBottom = 0;\r\n  };\r\n\r\n  render() {\r\n    return <div ref={this.container} className=\"Map\"></div>;\r\n  }\r\n}\r\nexport default Map;\r\n","import React, {Component} from \"react\";\nimport classNames from \"classnames\";\nimport {getData} from \"../lib/dataGenerator\";\nimport countriesList from \"../lib/countryData\";\nimport * as dataHandlers from \"../lib/dataHandlers\";\nimport * as dataHelpers from \"../lib/dataHelpers\";\nimport TextPanel from \"./TextPanel\";\nimport VisualPanel from \"./VisualPanel\";\nimport Dropdown from \"./Dropdown\";\nimport Button from \"./Button\";\nimport Histogram from \"./Histogram\";\nimport Map from \"./Map\";\nimport \"../scss/App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.date = new Date();\n    this.state = {\n      data: getData(countriesList),\n      isMounted: false,\n      profit: {},\n      users: {},\n      orders: {},\n      complaints: {},\n      stats: {\n        period: \"week\",\n        timeRanges: \"\",\n      },\n      analytics: {\n        field: \"profit\",\n        month: 0,\n        //month: this.date.getMonth() + 1,\n        year: this.date.getFullYear(),\n        mapData: {},\n        histData: [],\n        summaryData: [],\n      },\n      yearsArray: [],\n      colors: {},\n      maximizedPanel: null,\n    };\n  }\n\n  componentDidMount = () => {\n    const {\n      data,\n      stats: {period},\n      analytics,\n      analytics: {field, month, year},\n    } = this.state;\n    const {getMapData, getHistData, getSummaryData, getColorRgb} = dataHandlers;\n    const {statsFields} = dataHelpers;\n    const mapData = getMapData(data, field, month, year);\n    const histData = getHistData(data, field, month, year);\n    const summaryData = getSummaryData(data, month, year);\n    const colors = {};\n    Object.keys(statsFields).forEach(\n      (field) => (colors[field] = getColorRgb(field))\n    );\n\n    this.handleStats(period);\n    this.setState({\n      yearsArray: dataHandlers.getYears(data),\n      analytics: {\n        ...analytics,\n        mapData,\n        histData,\n        summaryData,\n      },\n      colors,\n      isMounted: true,\n    });\n  };\n\n  handleStats = (period) => {\n    const {data} = this.state;\n    const {\n      getTotalInTimeRange,\n      getBreakpointDates,\n      getTimeRanges,\n    } = dataHandlers;\n    const {statsFields} = dataHelpers;\n    const breakpointDates = getBreakpointDates(period);\n\n    Object.keys(statsFields).forEach((field) => {\n      const statsOutput = getTotalInTimeRange(data, field, breakpointDates);\n      const [lastPeriodTotal, percentage] = statsOutput;\n\n      this.setState({\n        [field]: {\n          value: lastPeriodTotal,\n          percentage,\n        },\n      });\n    });\n\n    const timeRanges = getTimeRanges(breakpointDates, period);\n\n    const stats = {\n      period,\n      timeRanges,\n    };\n    this.setState({stats});\n  };\n\n  handleAnalytics = (type, id) => {\n    const {data, analytics} = this.state;\n    let {field, month, year} = this.state.analytics;\n    const {getMapData, getHistData, getSummaryData, getColorRgb} = dataHandlers;\n\n    field = type === \"field\" ? id : field;\n    month = type === \"month\" ? id : month;\n    year = type === \"year\" ? id : year;\n    const mapData = getMapData(data, field, month, year);\n    const histData = getHistData(data, field, month, year);\n    const summaryData =\n      type === \"month\" || type === \"year\"\n        ? getSummaryData(data, month, year)\n        : analytics.summaryData;\n    const accentColor =\n      type === \"field\" ? getColorRgb(id) : this.state.accentColor;\n\n    this.setState({\n      analytics: {\n        ...analytics,\n        [type]: id,\n        mapData,\n        histData,\n        summaryData,\n      },\n      accentColor,\n    });\n  };\n\n  renderAnalytics = (type) => {\n    const {\n      analytics: {field, mapData, histData, summaryData},\n      colors,\n    } = this.state;\n\n    switch (type) {\n      case \"histogram\":\n        return (\n          <Histogram\n            data={histData}\n            keys={[field]}\n            type=\"histogram\"\n            layout=\"vertical\"\n            margin={{top: 60, right: 30, bottom: 30, left: 60}}\n            colors={(id) => colors[id]}\n            enableGridY={true}\n          />\n        );\n\n      case \"map\":\n        return <Map data={mapData} />;\n\n      case \"summary\":\n        return (\n          <Histogram\n            data={summaryData}\n            keys={[\n              \"profitBefore\",\n              \"profitCurrent\",\n              \"usersBefore\",\n              \"usersCurrent\",\n              \"ordersBefore\",\n              \"ordersCurrent\",\n              \"complaintsBefore\",\n              \"complaintsCurrent\",\n            ]}\n            type=\"summary\"\n            layout=\"horizontal\"\n            margin={{top: 60, right: 30, bottom: 50, left: 100}}\n            colors={(id) => {\n              const isCurrent = id.includes(\"Current\");\n              return isCurrent ? colors[id.replace(\"Current\", \"\")] : \"#fff\";\n            }}\n            enableGridX={true}\n            axisBottom={{\n              tickSize: 5,\n              tickPadding: 5,\n              tickRotation: 0,\n              tickValues: [20, 40, 60, 80],\n            }}\n          />\n        );\n\n      default:\n        return false;\n    }\n  };\n\n  handleMaximize = (id) => {\n    this.setState((prevState) => ({\n      maximizedPanel: prevState.maximizedPanel === id ? null : id,\n    }));\n  };\n\n  handleExport = (data, filename, type) => {\n    const file = new Blob([data], {type: type});\n    if (window.navigator.msSaveOrOpenBlob)\n      // IE10+\n      window.navigator.msSaveOrOpenBlob(file, filename);\n    else {\n      // Others\n      const a = document.createElement(\"a\"),\n        url = URL.createObjectURL(file);\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      setTimeout(function () {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      }, 0);\n    }\n  };\n\n  render() {\n    const {\n      data,\n      stats: {period, timeRanges},\n      analytics: {field, month, year},\n      yearsArray,\n      maximizedPanel,\n      isMounted,\n    } = this.state;\n\n    const {statsFields, statsPeriods, months, analyticsPanels} = dataHelpers;\n\n    const dropdownsLists = {\n      field: [statsFields, field],\n      month: [months, month],\n      year: [yearsArray, year],\n    };\n\n    const analyticsClass = classNames(\n      \"App__section\",\n      \"App__section--analytics\",\n      {\n        [`App__section--${maximizedPanel}Max`]: maximizedPanel,\n      }\n    );\n\n    const sectionHeadingClass = \"App__heading App__heading--section\";\n\n    const appInfoCurrent = timeRanges ? timeRanges.split(\"vs.\")[0] : \"\";\n    const appInfoBefore = timeRanges ? timeRanges.split(\"vs.\")[1] : \"\";\n\n    return (\n      <main className=\"App\">\n        <h1 className=\"App__heading\">dashboard _</h1>\n\n        {/* LATEST STATS SECTION */}\n        <section className=\"App__section App__section--stats\">\n          {/* LATEST STATS HEADER */}\n          <header className=\"App__header App__header--stats\">\n            <h2 className={sectionHeadingClass}>Recent</h2>\n            <p className=\"App__info\">\n              <span className=\"App__info--current\">{appInfoCurrent} vs.</span>\n              <span className=\"App__info--before\">{appInfoBefore}</span>\n            </p>\n            <Dropdown\n              currentId={period}\n              type=\"period\"\n              menuList={statsPeriods}\n              onMenuClick={this.handleStats}\n            />\n          </header>\n\n          {/* LATEST STATS TEXT PANELS */}\n          {isMounted &&\n            Object.entries(statsFields).map(([field, heading]) => {\n              const {value, percentage} = this.state[field];\n\n              return (\n                <TextPanel\n                  key={field}\n                  id={field}\n                  heading={heading}\n                  value={value}\n                  percentage={percentage}\n                />\n              );\n            })}\n        </section>\n\n        {/* ANALYTICS SECTION */}\n        <section className={analyticsClass}>\n          {/* ANALYTICS HEADER */}\n          <header className=\"App__header App__header--analytics\">\n            <h2 className={sectionHeadingClass}>Analytics</h2>\n            {/* DROPDOWNS */}\n            {Object.entries(dropdownsLists).map(([type, [list, id]]) => {\n              return (\n                <Dropdown\n                  key={id}\n                  currentId={id}\n                  type={type}\n                  menuList={list}\n                  onMenuClick={this.handleAnalytics}\n                />\n              );\n            })}\n          </header>\n\n          {/* ANALYTICS CHARTS */}\n          {analyticsPanels.map((panel) => {\n            const isMaximized = this.state.maximizedPanel === panel;\n            return (\n              <VisualPanel\n                key={panel}\n                id={panel}\n                heading={panel}\n                isMaximized={isMaximized}\n                onMaximize={this.handleMaximize}>\n                {this.renderAnalytics(panel)}\n              </VisualPanel>\n            );\n          })}\n\n          {/* ANALYTICS FOOTER */}\n          <footer className=\"App__footer\">\n            <Button\n              id=\"export\"\n              label=\"export\"\n              onClick={() =>\n                this.handleExport(\n                  JSON.stringify(data),\n                  \"dashboard\",\n                  \"text/plain\"\n                )\n              }\n            />\n            <Button id=\"print\" label=\"print\" onClick={() => window.print()} />\n          </footer>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}